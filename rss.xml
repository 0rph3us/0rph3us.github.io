<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael im Netz</title>
    <link>https://0rph3us.github.io/</link>
    <description>Recent content on Michael im Netz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Diese Seite ist unter der &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt; lizenziert.</copyright>
    <lastBuildDate>Mon, 28 Dec 2015 22:37:08 +0100</lastBuildDate>
    <atom:link href="https://0rph3us.github.io/rss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LibreSSL und HAProxy</title>
      <link>https://0rph3us.github.io/post/2015/12/libressl-und-haproxy/</link>
      <pubDate>Mon, 28 Dec 2015 22:37:08 +0100</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/12/libressl-und-haproxy/</guid>
      <description>

&lt;p&gt;Wenn man &lt;a href=&#34;https://www.raspbian.org/&#34;&gt;Raspbian&lt;/a&gt; einsetzt (oder eine fast beliebige andere Linux-Distribution)
hat man das &lt;em&gt;Problem&lt;/em&gt;, dass die mitgelieferten Webserver und Loadbalancer &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;
nutzen. OpenSSL ist 2015 durch eine Sicherheitslücken negativ aufgefallen, außerdem
gibt es keine Unterstützung&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; für &lt;a href=&#34;https://blog.cloudflare.com/do-the-chacha-better-mobile-performance-with-cryptography/&#34;&gt;ChaCha20 Cipher Suiten&lt;/a&gt;. Diese haben den Vorteil,
dass sie in Software schneller sind als &lt;a href=&#34;https://de.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES&lt;/a&gt;. Das macht sich insbesondere bei meinen
Raspberry Pi und bei Smartphones bemerkbar. Diese haben Hardware AES.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.libressl.org/&#34;&gt;LibreSSL&lt;/a&gt; ist eine Alternative zu OpenSSL. Es hat die Unterstützung für ChaCha20. Bei
LibreSSL liegt der Fokus auf Sicherheit und weniger auf die Unterstützung von alten
Schnittstellen. Deswegen ist davon auszugehen, dass es in der Zukunft auch weniger
kritische Sicherheitslücken geben wird.&lt;/p&gt;

&lt;h2 id=&#34;haproxy:bddda923aec4e8e8e36a0066c730c514&#34;&gt;HAProxy&lt;/h2&gt;

&lt;p&gt;In meinen Setup ist &lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt; vor dem Webserver (Nginx). Es ist vielleicht sinnlos
einen Loadbalancer auf dem Pi zu nutzen aber ich finde, dass sich HAProxy ein einigen
Stellen einfacher konfigurieren lässt als Nginx.&lt;/p&gt;

&lt;h2 id=&#34;haproxy-mit-libressl-und-pcre-bauen:bddda923aec4e8e8e36a0066c730c514&#34;&gt;HAProxy mit LibreSSL und PCRE bauen&lt;/h2&gt;

&lt;p&gt;kopiere das folgende Script in eine Datei und führe es aus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

# names of latest versions of each package
export HAPROXY_VERSION=1.6.3
export VERSION_PCRE=pcre-8.38
export VERSION_LIBRESSL=libressl-2.3.1
export VERSION_HAPROXY=haproxy-$HAPROXY_VERSION

# URLs to the source directories
export SOURCE_LIBRESSL=ftp://ftp.openbsd.org/pub/OpenBSD/LibreSSL/
export SOURCE_PCRE=ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/
export SOURCE_HAPROXY=http://www.haproxy.org/download


# clean out any files from previous runs of this script
rm -rf build
mkdir build

# proc for building faster
NB_PROC=$(grep -c ^processor /proc/cpuinfo)

# ensure that we have the required software
#sudo apt-get -y install curl wget build-essential libgd-dev libgeoip-dev checkinstall git

# grab the source files
echo &amp;quot;Download sources&amp;quot;
wget -P ./build &amp;quot;${SOURCE_PCRE}${VERSION_PCRE}.tar.gz&amp;quot;
wget -P ./build &amp;quot;${SOURCE_LIBRESSL}${VERSION_LIBRESSL}.tar.gz&amp;quot;
wget -P ./build &amp;quot;${SOURCE_HAPROXY}/$(echo $HAPROXY_VERSION | cut -d. -f 1-2)/src/$VERSION_HAPROXY.tar.gz&amp;quot;

# expand the source files
echo &amp;quot;Extract Packages&amp;quot;
cd build || exit 1

tar xfz &amp;quot;${VERSION_HAPROXY}.tar.gz&amp;quot;
tar xfz &amp;quot;${VERSION_LIBRESSL}.tar.gz&amp;quot;
tar xfz &amp;quot;${VERSION_PCRE}.tar.gz&amp;quot;
cd ../ || exit 1

export BPATH=&amp;quot;${PWD}/build&amp;quot;
export STATICLIBSSL=&amp;quot;${BPATH}/${VERSION_LIBRESSL}&amp;quot;

# build static LibreSSL
echo &amp;quot;Configure &amp;amp; Build LibreSSL&amp;quot;
cd &amp;quot;${STATICLIBSSL}&amp;quot; || exit 1
./configure --prefix=&amp;quot;${STATICLIBSSL}/_openssl/&amp;quot; --enable-shared=no &amp;amp;&amp;amp; make install-strip -j &amp;quot;${NB_PROC}&amp;quot;

# build pcre
export STATICLIPCRE=&amp;quot;${BPATH}/${VERSION_PCRE}&amp;quot;
cd &amp;quot;${STATICLIPCRE}&amp;quot; || exit 1
./configure --prefix=&amp;quot;${STATICLIPCRE}/_pcre&amp;quot; --enable-shared=no --enable-utf8 --enable-jit
make -j &amp;quot;${NB_PROC}&amp;quot;
make install


echo &amp;quot;Build HAProxy&amp;quot;
cd &amp;quot;${BPATH}/${VERSION_HAPROXY}&amp;quot; || exit 1

make \
-j &amp;quot;${NB_PROC}&amp;quot; \
TARGET=linux2628 \
USE_STATIC_PCRE=1 \
USE_PCRE_JIT=1 \
PCRE_LIB=&amp;quot;${STATICLIPCRE}/_pcre/lib&amp;quot; \
PCRE_INC=&amp;quot;${STATICLIPCRE}/_pcre/include&amp;quot; \
USE_OPENSSL=1 \
SSL_INC=&amp;quot;${STATICLIBSSL}/_openssl/include&amp;quot; \
SSL_LIB=&amp;quot;${STATICLIBSSL}/_openssl/lib&amp;quot; \
USE_ZLIB=1 \
DEFINE=&amp;quot;-fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2&amp;quot;


echo &amp;quot;All done.&amp;quot;
echo &amp;quot;become root and type: &amp;quot;
echo &amp;quot;  cp build/haproxy-${HAPROXY_VERSION}/haproxy /usr/local/sbin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;konfiguration:bddda923aec4e8e8e36a0066c730c514&#34;&gt;Konfiguration&lt;/h2&gt;

&lt;p&gt;Hier ist eine Beispielkonfiguration. Wobei die SSL Konfiguration sehr
paranoid ist.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;global
        maxconn 100
        ssl-default-bind-ciphers CHACHA20+EECDH:AES256+EECDH
        ssl-default-bind-options force-tlsv12

        daemon
        user haproxy
        chroot /var/lib/haproxy
        stats socket /var/run/haproxy.sock mode 660 level admin


defaults
        mode http
        timeout connect 5s
        timeout client 5s
        timeout server 5s

        stats scope .

        option socket-stats
        option forwardfor


frontend myfrontend
        # primary cert is /etc/haproxy/certs/server.pem
        # /etc/haproxy/certs/ contains additional certificates for SNI clients
        bind :443 tfo ssl crt /etc/haproxy/certs/server.pem crt /etc/haproxy/certs/ ecdhe secp384r1 name ssl-traffic
        bind :80 name http-traffic

        http-response set-header X-Frame-Options                DENY
        http-response set-header X-Content-Type-Options         nosniff
        http-response set-header Strict-Transport-Security      max-age=31536000;\ includeSubdomains;\ preload

        http-request redirect scheme https code 301 if !{ ssl_fc }

        http-request set-header X-Forwarded-Proto                https


        use_backend stats               if { path_beg /haproxy/stats }

        default_backend mybackend


backend mybackend
        # a http backend
        server s3 10.0.0.3:80
        server s4 10.0.0.3:443 ssl verify none


backend stats
        stats enable
        stats show-legends
        stats realm Haproxy\ Statistics
        stats uri /haproxy/stats
        stats refresh 30s

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;In den kommenden Versionen von OpenSSL wird es Unterstützung für ChaCha20 Cipher Suiten geben. Ich finde die Quelle gerade nicht :-(
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Lifecycle 2015</title>
      <link>https://0rph3us.github.io/post/2015/11/continuous-lifecycle-2015/</link>
      <pubDate>Fri, 13 Nov 2015 07:21:17 +0100</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/11/continuous-lifecycle-2015/</guid>
      <description>&lt;p&gt;Ich war vom 10.11. bis 12.11.2015 auf der Continuous Lifecycle
in Mannheim. Die Konferenz hat sich rund um das Thema Continuous
Delivery gedreht, weiterhin war &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; in aller Munde. Durch
die Konferenz wurde mir gezeigt, dass Docker inzwischen/langsam
reif für den produktiven Betrieb ist.&lt;/p&gt;

&lt;p&gt;Damit Continuous Delivery funktioniert nutzen viele interdisziplinäre
Teams. Dabei hat das einzelne Team in der Regel viele Freiheiten,
aber es gibt auch unumstößliche Regeln. Die folgenden Dinge habe ich
oft gehört und die Reihenfolge ist willkürlich gewählt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;der gesamte Code ist in einem Repo und alle arbeiten auf einen Branch&lt;/li&gt;
&lt;li&gt;es gibt ein einheitliches Logging und Monitoring&lt;/li&gt;
&lt;li&gt;Entwickler sind für den Betrieb der Software verantwortlich&lt;/li&gt;
&lt;li&gt;der Betrieb (Admins) sitzt bei den Entwicklern und es gibt keine wirkliche Unterscheidung&lt;/li&gt;
&lt;li&gt;kleine Teams&lt;/li&gt;
&lt;li&gt;wenige bis gar keine Schnittstellen zwischen den Teams&lt;/li&gt;
&lt;li&gt;gute automatische Tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sehr beeindruckend fand ich den Vortrag von &lt;a href=&#34;http://www.gameduell.de/&#34;&gt;GameDuell&lt;/a&gt;. Sie machen Continuous Delivery
mit &lt;a href=&#34;https://glassfish.java.net/&#34;&gt;GlassFish&lt;/a&gt;. Jeder der GlassFish kennt, weiß wie schwerfällig sich
dieser Application Server anfühlt. Dieser Talk hat mir sehr deutlich gemacht,
dass man seine Werkzeuge nur richtig nutzen muss, um innovative
Dinge zu machen&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dd0573e8a873648dc318693be9446728:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dd0573e8a873648dc318693be9446728:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In der nächsten Zeit werde mir privat und beruflich Docker genauer
ansehen. Da ich definitiv auf tolle Technologien stehe.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dd0573e8a873648dc318693be9446728:1&#34;&gt;Innovativ ist für mich die Art, wie GameDuell entwickelt und Software ausrollt. Wie innovativ das Angebot von GameDuell ist, kann und möchte ich nicht einschätzen ;-)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dd0573e8a873648dc318693be9446728:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Einen Jabber Server selbst betreiben</title>
      <link>https://0rph3us.github.io/post/2015/11/einen-jabber-server-selbst-betreiben/</link>
      <pubDate>Wed, 04 Nov 2015 06:55:11 +0100</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/11/einen-jabber-server-selbst-betreiben/</guid>
      <description>

&lt;p&gt;Am 30.09.2015 war &lt;code&gt;jabber.ccc.de&lt;/code&gt; für &lt;a href=&#34;https://ccc.de/de/updates/2015/jabbercccde&#34;&gt;2 Tage nicht verfügbar&lt;/a&gt;.
Das hat mich motiviert endlich einen eigenen jabber-Server zu
betreiben.&lt;/p&gt;

&lt;p&gt;Hinter Jabber steckt das offene Protokoll &lt;a href=&#34;Extensible Messaging and Presence Protocol&#34;&gt;XMPP&lt;/a&gt;, welches dem
&lt;a href=&#34;https://de.wikipedia.org/wiki/Extensible_Markup_Language&#34;&gt;XML&lt;/a&gt; Standard folgt und für Instant Messaging (Chats) genutzt wird.
Ich habe mich für &lt;a href=&#34;http://prosody.im/&#34;&gt;Prosody&lt;/a&gt; als Jabber-Server entschieden. Für
Prosody sprechen, aus meiner Sicht, seine einefache Konfiguration
sowie seine Schlankheit. Eine Alternatibe ist &lt;a href=&#34;https://www.ejabberd.im/&#34;&gt;ejabberd&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation:9cdd19a5faf21f7205a2e96d6a467276&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Damit man Prosody installieren kann, sollte man das Repository
der Entwickler einbinden. Ich nehme auch bei &lt;code&gt;jessie&lt;/code&gt; als
Distribution &lt;code&gt;whezzy&lt;/code&gt;, weil &lt;a href=&#34;https://de.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;TLS&lt;/a&gt; mit mit den &lt;code&gt;jessie&lt;/code&gt; Paketen
nicht funktioniert.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden bzw. sudo vor echo und tee schreiben
echo deb http://packages.prosody.im/debian wheezy main | tee -a /etc/apt/sources.list.d/prosody.list
wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun kann man Prosody installieren&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt-get update &amp;amp;&amp;amp; apt-get install prosody lua-sec-prosody
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das Paket &lt;code&gt;lua-sec-prosody&lt;/code&gt; wird für TLS benötigt. Wenn man die aktuellste Version
installieren möchte, dann muss man das &lt;code&gt;prosody-0.10&lt;/code&gt; statt &lt;code&gt;prosody&lt;/code&gt; installieren.
Ich habe bis jetzt keine Probleme mit den nighly Builds gehabt.&lt;/p&gt;

&lt;h2 id=&#34;konfiguration:9cdd19a5faf21f7205a2e96d6a467276&#34;&gt;Konfiguration&lt;/h2&gt;

&lt;p&gt;Die Konfiguration wird in &lt;code&gt;/etc/prosody/prosody.cfg.lua&lt;/code&gt; erledigt. Als erstes
In der Zeile &lt;code&gt;admins = { &amp;quot;admin@jabber.0rpheus.net&amp;quot; }&lt;/code&gt; kann gleich
ein entsprechender Admin eingetragen werden. Um zusätzliche User
anzulegen gibt es zwei Möglichkeiten. Entweder direkt über einen
Jabber Client oder auf Zuruf durch einen Administrator. Ersteres
würde bedeuteten, dass sich jeder, der den Server kennt,
registrieren kann. Dazu muss die Zeile &lt;code&gt;allow_registration = false;&lt;/code&gt;
auf &lt;code&gt;allow_registration = true;&lt;/code&gt; geändert werden. Einen Nutzer
legt so an:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;prosodyctl adduser foo@jabber.0rpheus.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Als nächstes wird die Domain konfiguriert.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VirtualHost &amp;quot;jabber.0rpheus.net&amp;quot;
        enabled = true

        -- Assign this host a certificate for TLS, otherwise it would use the one
        -- set in the global section (if any).
        -- Note that old-style SSL on port 5223 only supports one certificate, and will always
        -- use the global one.
        ssl = {
                ciphers     = &amp;quot;AES256+EECDH:AES256+EDH:AES128+EECDH:AES128+EDH&amp;quot;;
                key         = &amp;quot;/etc/prosody/certs/jabber.0rpheus.net.key&amp;quot;;
                certificate = &amp;quot;/etc/prosody/certs/jabber.0rpheus.net.crt&amp;quot;;
                dhparam     = &amp;quot;/etc/prosody/certs/dh-4096.pem&amp;quot;;
                protocol    = &amp;quot;tlsv1_2&amp;quot;;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die globalen SSL Einstellungen können entweder entfernt oder
ebenfalls mit denselben Werten nochmal befüllt werden.&lt;/p&gt;

&lt;p&gt;Per Default speichert Prosody die Passwörter im Klartext ab,
um mit alten Clients kompatibel zu sein. Wer das nicht möchte bzw.
nicht braucht, kann die Passwörter gehashed abspeichern.
Dazu muss eine zusätzliche Zeile hinzugefügt werden.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;authentication = &amp;quot;internal_hashed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Um die Änderungen zu aktivieren, muss der Prosody Dienst
einmal durchgestartet werden.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl restart prosody
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Folgende Portfreischaltungen werden für einen reibungslosen Betrieb noch benötigt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Port 5222 eingehend (Clientverbindungen)&lt;/li&gt;
&lt;li&gt;Port 5280 eingehend (Clientverbindungen) (http-bind)&lt;/li&gt;
&lt;li&gt;Port 5281 eingehend (Clientverbindungen) (https-bind)&lt;/li&gt;
&lt;li&gt;Port 5269 ein- und ausgehend Verbindung zu fremden Servern&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Images mit Partionstabellen mounten</title>
      <link>https://0rph3us.github.io/post/2015/10/images-mit-partionstabellen-mounten/</link>
      <pubDate>Thu, 01 Oct 2015 21:27:34 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/10/images-mit-partionstabellen-mounten/</guid>
      <description>

&lt;p&gt;Ein Vorteil vom Raspberry Pi ist, dass das Betriebssystem auf einer SD-Karte
ist. Dadurch kann man relativ einfach ein Backup vom gesamten System machen.
Ich gehe davon aus, dass man noch einen weiteren Rechner mit Linux zur
Verfügung hat.&lt;/p&gt;

&lt;p&gt;Ein Backup bietet sich auf jeden Fall an, wenn man ein größeres Update plant
oder ein etwas Experimentiert und viel Software nachinstallieren muss. Im
zweiten Fall kann man schnell sein System verfriemeln und man weiß nicht nicht
mehr was man alles verändert hat.&lt;/p&gt;

&lt;h2 id=&#34;backup-erstellen:f07b0a87c6d8ece6184d80edbd0252a3&#34;&gt;Backup erstellen&lt;/h2&gt;

&lt;p&gt;Am einfachsten kann man ein Backup der kompletten SD-Karte mit &lt;code&gt;dd&lt;/code&gt; machen. Dabei
muss man die Karte in einen zweiten Rechner stecken und heraus finden, wie die SD-Karte heißt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda           8:0    0 232,9G  0 disk
├─sda1        8:1    0  46,6G  0 part /
└─sda3        8:3    0 186,3G  0 part /home
mmcblk0     179:0    0  14,7G  0 disk
├─mmcblk0p1 179:1    0   256M  0 part
└─mmcblk0p2 179:2    0  14,5G  0 part
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Man sieht, dass das Device für die SD-Karte &lt;code&gt;mmcblk0&lt;/code&gt; ist.
Das andere Device ist meine Festplatte.&lt;/p&gt;

&lt;p&gt;Mit &lt;code&gt;dd&lt;/code&gt; machen wir das eigenliche Backup. Dabei wird der
gesamte Inhalt von &lt;code&gt;/dev/mmcblk0&lt;/code&gt; in die Datei &lt;code&gt;$HOME/backups/pi-backup-$(date +%F).img&lt;/code&gt;
geschrieben. &lt;code&gt;$(date +%F)&lt;/code&gt; fügt das aktuelle Datum in
den Dateinamen ein.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dd if=/dev/mmcblk0 of=$HOME/backups/pi-backup-$(date +%F).img bs=4096
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun hat man ein Backup fertig.&lt;/p&gt;

&lt;h2 id=&#34;backup-ansehen:f07b0a87c6d8ece6184d80edbd0252a3&#34;&gt;Backup ansehen&lt;/h2&gt;

&lt;p&gt;Beim Raspberry Pi ist eine Partionstabelle auf der
SD-Karte. Die Daten befinden sich in der 2. Partion.
Diese muss man mounten.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo kpartx $HOME/backups/pi-backup-2015-09-30.img
[sudo] password for rennecke:
loop0p1 : 0 114688 /dev/loop0 8192
loop0p2 : 0 62211072 /dev/loop0 122880
loop deleted : /dev/loop0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun weiß man, dass die zweite Partion bei Block 62211072
beginnt. Das mounten geht jetzt wie folgt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mount -o loop,rw,offset=62914560 $HOME/backups/pi-backup-2015-09-30.img /mnt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ich muss meistens das Abbild beim ersten mal ReadWrite &lt;code&gt;rw&lt;/code&gt; mounten, da das Dateisystem überprüft werden muss.
Sonst kann man auch ReadOnly &lt;code&gt;ro&lt;/code&gt; mounten. Das hat den Vorteil, dass man nichts aus versehen im Backup verändern kann.&lt;/p&gt;

&lt;p&gt;Nachdem man die Partion gemountet hat, kann man mit &lt;code&gt;rsync&lt;/code&gt; oder einfach kopieren einzelne Dateien bzw. ganze Verzeichnisse wieder herstellen. &lt;code&gt;rsync&lt;/code&gt; kann man auch in verbindung mit ssh verwenden.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian Jessie</title>
      <link>https://0rph3us.github.io/post/2015/10/raspbian-jessie/</link>
      <pubDate>Thu, 01 Oct 2015 19:44:06 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/10/raspbian-jessie/</guid>
      <description>&lt;p&gt;Seit dem 24.09.2015 gibt es die &lt;a href=&#34;https://www.raspberrypi.org/blog/raspbian-jessie-is-here/&#34;&gt;Raspbian&lt;/a&gt;-Version, welche auf &lt;a href=&#34;https://www.debian.org/News/2015/20150426&#34;&gt;Jessie&lt;/a&gt; basiert. Ich habe auch meinen Raspberry Pi ein Update auf die neue Version gegönnt.&lt;/p&gt;

&lt;p&gt;Es wird empfohlen, dass man eine Neuinstallation macht. Das habe ich auch gemacht. Vorher sollte man noch ein &lt;a href=&#34;https://0rph3us.github.io/post/2015/10/images-mit-partionstabellen-mounten/&#34;&gt;Backup von der SD-Karte&lt;/a&gt; machen.&lt;/p&gt;

&lt;p&gt;Die Installation und das Einspielen der Daten war kein Problem. Meine Anleitungen haben alle noch funktioniert, was die Installation der Software sehr einfach gemacht hat.&lt;/p&gt;

&lt;p&gt;Also viel Spaß beim Update.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deterministisches Loadbalancing</title>
      <link>https://0rph3us.github.io/post/2015/09/deterministisches-loadbalancing/</link>
      <pubDate>Thu, 17 Sep 2015 05:58:20 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/09/deterministisches-loadbalancing/</guid>
      <description>

&lt;p&gt;Beim Loadbalancing verteilet ein Loadbalancer, wie HAProxy die Last auf mehrere Server. In vielen Fällen macht man das Roud-Robin oder nach Last. Es ergibt auch durchaus Sinn nach einer ID die Backendserver auszuwählen. Daraus ergeben sich zwei Vorteile. Zum einen kann es für Backendserver besser sein, wenn die selbe ID immer auf den selben Server kommt. Dadurch können interene Caches evtl. besser ausgenutzt werden. Da eine ID immer einen Server zugeordnet ist, wird das Loadbalancing deterministisch. Das hat den unschätzbaren Vorteil, dass z.B. eine Anfrage die fehl schlägt immer fehl schlägt.&lt;/p&gt;

&lt;p&gt;Bei meinen Arbeitgeber hatten wir das Problem, dass bestimmte URLs konsequent nicht gehen. Bei einen naiven Test hat der Entwickler festgestellt, dass sein Dienst auf die URL korrekt antwortet. Durch meinen Test der Proxykonfiguration konnte ich ausschließen, dass das Routing im HAProxy Schuld am Fehlverhalten ist. Da dieser Dienst mit einer konsistenten Hashfunktion deterministisch geroutet wird, trat der Fehler immer auf. Dabei stellte sich heraus, dass eine Instanz nicht in der richtigen Version&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:69d192c4ad0750c8f53fe9a830e4a70c:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:69d192c4ad0750c8f53fe9a830e4a70c:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; lief.&lt;/p&gt;

&lt;p&gt;Da Fehler immer wieder vorgekommen, ist es wichtig sie schnell und zuverlässig zu beseitigen. In solchen Situationen ist es besser, den Fehler &lt;strong&gt;immer&lt;/strong&gt; zu haben, anstatt bei jeder x-ten Anfrage.&lt;/p&gt;

&lt;h2 id=&#34;umsetzung-von-deterministischen-loadbalancing:69d192c4ad0750c8f53fe9a830e4a70c&#34;&gt;Umsetzung von deterministischen Loadbalancing&lt;/h2&gt;

&lt;p&gt;Mein favorisierter Loadbalancer für HTTP ist &lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt;. Ich hatte die Anforderung nach einer ID, welche im Path der URL steht zu balancen. Das ist nicht ganz offensichtlich mit HAProxy. Meine Umsetzung sieht wie folgt aus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;backend Webserver
        balance hdr(X-MyID)
        hash-type consistent

        http-request set-header     X-MyID %[url]
        http-request replace-header X-MyID ^/foo/bar/lol/([0-9]{5,5}).* \1
        http-request replace-header X-MyID ^/foo/barbar/([0-9]{5,5}).* \1

        server webserver1 10.0.0.1:80
        server webserver2 10.0.0.2:80
        server webserver3 10.0.0.3:80
        server webserver4 10.0.0.4:80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Als erstes wird die URL in den Header &lt;strong&gt;X-MyID&lt;/strong&gt; kopiert. Die folgenden regulären Ausdrücke schmeißen alles weg, außer die 5-stellige ID. Falls keiner der beiden Ausdrücke angewendet werden kann, steht die URL noch im Header. Dann wird diese als Kriterium für die Verteilung genommen. Der &lt;code&gt;hash-type consistent&lt;/code&gt; bei HAProxy verteilt die Anfragen auf die anderen Server, falls ein Server aus dem Loadbalancing geht.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:69d192c4ad0750c8f53fe9a830e4a70c:1&#34;&gt;Es gab auch schon den Fall, dass eine Instanz auf bestimmte Anfragen nicht beantworten konnte, weil ein Teil der Applikation Ammok lief. Dieser Fehler war auch nicht von außen ersichtlich.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:69d192c4ad0750c8f53fe9a830e4a70c:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Stromtankstellen in Halle</title>
      <link>https://0rph3us.github.io/post/2015/09/stromtankstellen-in-halle/</link>
      <pubDate>Wed, 16 Sep 2015 05:48:57 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/09/stromtankstellen-in-halle/</guid>
      <description>&lt;p&gt;Ja, es gibt sie inzwischen auch in Halle (Saale). Dummerweise hat niemand daran gedacht ein Schild aufzustellen, dass nur Elekroautos dort parken (und laden dürfen). Diese Park- bzw. Ladeplätze waren jedes mal von Autos belegt, welche mit 100 %iger Sicherheit einen flüssigen Kraftstoff tanken.&lt;/p&gt;

&lt;p&gt;In meinen Augen hat sich die Stadt auch keinen Gefallen getan. Denn sie hat vorhandene Parkplätze zu einen Parkplatz mit Ladestation umfunktioniert.&lt;/p&gt;

&lt;p&gt;Es gibt auch etwas positives an der ganzen Sache: Elekromobilität scheint immer mehr auf dem Vormarsch zu sein. Ich sehr immer mehr Ladestationen. Damit ist wenigsten die Frage beantwortet, wo man sein Auto Laden kann.&lt;/p&gt;

&lt;p&gt;Die Norweger machen es uns vor, wie man Elekroautos zum rollen bringt. Mir ist durchaus bewusst, dass man dort Elekroautos sehr stark subventioniert. So sind sie zum Teil günstiger, als konventionelle Autos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guten Morgen</title>
      <link>https://0rph3us.github.io/post/2015/09/guten-morgen/</link>
      <pubDate>Tue, 15 Sep 2015 05:50:08 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/09/guten-morgen/</guid>
      <description>

&lt;p&gt;Ich habe schon länger keinen neuen Post hinterlassen. Es
lag unter anderen daran, dass ich umgezogen bin. Der größte
Teil des Umzuges ist inzwischen geschafft und alles ist an
seinen Platz.&lt;/p&gt;

&lt;p&gt;In der Zwischenzeit war nicht untätig, Ich habe mit &lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt;
etwas experimentiert. Ziel war es Zertifikate mit RSA und &lt;a href=&#34;http://www.cs.uni-potsdam.de/ti/lehre/05-Kryptographie/slides/Elliptische_Kurven.pdf&#34;&gt;Elliptische Kurven&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3fd9ce4c42cd011d05713db9016f8f87:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3fd9ce4c42cd011d05713db9016f8f87:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; für den selben Hostname/FQDN anzubieten.&lt;/p&gt;

&lt;p&gt;Weswegen möchte man das eigenlich machen? Zertifikate mit
RSA sind sehr lang (größergleich 4096 Bit), wenn man
paranoit ist. Diese langen Zertifikate kosten Zeit bei der Übertragung und Rechenkraft beim Handshake. Aus diesem Grud liegt es nahe Zertifikate mit Elliptischen Kurven zu nutzen. Die größten Kurven haben eine Länge von 571 Bit. Dabei wird eine sehr höhere Sicherheit erreicht, als mit 8096 Bit langen RSA Schlüssel und sie lassen schneller berechnen.&lt;/p&gt;

&lt;p&gt;Da ich auf meinen Raspberry Pi zahlreiche Dienste betreibe, welche per SSL abgesichert sind, habe ich Stern-Zertifiake generiert. Wenn HAProxy eine eigene (Sub)&lt;a href=&#34;https://de.wikipedia.org/wiki/Zertifizierungsstelle&#34;&gt;CA&lt;/a&gt; hat, dann ist es möglich, dass bei jeder Anfrage mit einen neuen Hostname ein neues Zertifikat generiert wird.&lt;/p&gt;

&lt;h2 id=&#34;umsetzung:3fd9ce4c42cd011d05713db9016f8f87&#34;&gt;Umsetzung&lt;/h2&gt;

&lt;p&gt;In den aktuellen Developer Builds von HAProxy, aktuell 1.6-dev4 ist möglich ECC und RSA Zertifikate auf der selben IP und Port zu betreiben. Weiherhin ist es möglich Zertifikate zu generieren. Das dumme war nur, dass es nicht richtig mit Elliptischen Kurven funktioniert. Nach einiger Diskussion über den Sinn dieses Setups hat mit Christopher Faulet einen Patch geschieben, welcher funktioniert. Da der Patch auch bei mir funktioniert, gibt Christopher upstream.&lt;/p&gt;

&lt;h3 id=&#34;testconfig:3fd9ce4c42cd011d05713db9016f8f87&#34;&gt;Testconfig&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;global
        daemon
        maxconn 256

        ssl-default-bind-ciphers AES256+EECDH:AES256+EDH
        ssl-default-bind-options force-tlsv12
        tune.ssl.default-dh-param 4096
        tune.ssl.lifetime 600


defaults
        mode http
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms


frontend ssl-relay
        mode tcp
        bind 0.0.0.0:443

        use_backend ssl-ecc if { req.ssl_ec_ext 1 }
        default_backend ssl-ecc


backend ssl-ecc
        mode tcp

        server ecc unix@/var/run/haproxy_ssl_ecc.sock send-proxy-v2


backend ssl-rsa
        mode tcp

        server rsa unix@/var/run/haproxy_ssl_rsa.sock send-proxy-v2


listen webfarm
        bind unix@/var/run/haproxy_ssl_ecc.sock accept-proxy ssl crt /etc/haproxy/ecc_test.rennecke.dyndns.dk.pem tls-ticket-keys /etc/haproxy/ticket_keys ca-sign-file /etc/haproxy/ecc_subca.pem user nobody generate-certificates ecdhe secp521r1
        bind unix@/var/run/haproxy_ssl_rsa.sock accept-proxy ssl crt /etc/haproxy/rsa_star.rennecke.dyndns.dk.pem tls-ticket-keys /etc/haproxy/ticket_keys ecdhe secp521r1 user nobody
        mode http

        acl admin               path_beg /haproxy
        use_backend admin       if admin

        server nginx 127.0.0.1:88 check

backend admin
        stats enable
        stats hide-version
        stats show-legends
        stats realm Haproxy\ Statistics
        stats uri /haproxy?stats
        stats refresh 30s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In dieser Config generiere ich nur die ECC-Zertifikate für alle Hosts, außer &lt;code&gt;test.rennecke.dyndns.dk&lt;/code&gt;. Das ganze Setup funktioniert, aber es läuft noch nicht ganz rund.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3fd9ce4c42cd011d05713db9016f8f87:1&#34;&gt;Man schreibt auch oft &lt;a href=&#34;https://de.wikipedia.org/wiki/Elliptic_Curve_Cryptography&#34;&gt;ECC&lt;/a&gt; (Elliptic Curve) Cryptography
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3fd9ce4c42cd011d05713db9016f8f87:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sysadmin Day</title>
      <link>https://0rph3us.github.io/post/2015/07/sysadmin-day/</link>
      <pubDate>Fri, 31 Jul 2015 21:58:07 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/07/sysadmin-day/</guid>
      <description>&lt;p&gt;Wie jedes Jahr ist heute, am letzten Freitag im Juli &lt;a href=&#34;https://de.wikipedia.org/wiki/System_Administrator_Appreciation_Day&#34;&gt;Sysadmin Day&lt;/a&gt;. Auch dieses Jahr war es für mich
ein Tag wie jeder andere. Ich hoffe, dass einige User das hier lesen und im nächsten Jahr daran denken.&lt;/p&gt;

&lt;p&gt;Ich möchte an dieser Stelle allen meinen Lesern zum Sysadmin Day gratulieren. Da die meisten von Euch
Admins sind.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neues Gewand</title>
      <link>https://0rph3us.github.io/post/2015/07/neues-gewand/</link>
      <pubDate>Thu, 30 Jul 2015 21:45:59 +0200</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/07/neues-gewand/</guid>
      <description>&lt;p&gt;In der letzten Zeit habe ich mich mit der Programmiersprache &lt;a href=&#34;https://golang.org/&#34;&gt;go&lt;/a&gt; beschäftigt. In diesem Zusammenhang
bin ich auf &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; gestoßen. Man
kann mit Hugo, wie mit &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; statische Webseiten generieren. Da Hugo um Größenordnungen
schneller ist als Jekyll bin ich umgestiegen. Ein weiter Grund war, dass ich mein Layout ändern
wollte. Das habe ich mit dem Umstieg auf Hugo gleich gemacht.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eine eigene CA mit OpenSSL in 5 Minuten</title>
      <link>https://0rph3us.github.io/post/2015/07/eine-eigene-ca-mit-openssl-in-5-minuten/</link>
      <pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/07/eine-eigene-ca-mit-openssl-in-5-minuten/</guid>
      <description>

&lt;p&gt;Wenn man seine eigenen Dienste mit SSL/&lt;a href=&#34;https://de.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;TLS&lt;/a&gt; absichern möchte benötigt man Zertifikate. Inzwischen
gibt es auch kostenlose Zertifikate, diese haben aber Einschränkungen. Wenn man dynDNS verwendet bekommt
man keine offizellen Zertifikate, da man nicht der Eigentümer der Domain ist. Oft hat jeder Dienst, den man
anbietet auch einen eigene Subdomain. Wenn man mehrere Subdomains auf dem selben Port benötigt man ein
Wildcard-Zertifikat&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:116aed65bb730b226540f3cd4bf4c27a:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:116aed65bb730b226540f3cd4bf4c27a:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Dieses ist nach meinen Kenntnisstand nicht kostenlos zu bekommen.&lt;/p&gt;

&lt;p&gt;Wenn man nicht nur einen Webserver, sondern auch einen Jabber-Server betreibt lohnt es sich eine eigene
CA (Certificate Authority) betreiben, mit der man alle seine Zertifikate unterschreibt. Damit alle Clients
der CA vertrauen muss diese nur bekannt machen. Danach wird allen Zertifikaten vertraut, welche von der CA
unterschrieben wurden.&lt;/p&gt;

&lt;p&gt;Ein weiterer Vorteil: Mit der eigenen CA ist man im Zweifel auf der sicheren Seite. In den letzten Jahren
ist es öfter vorgekommen, dass gefälschte Zertifikate im Umlauf waren. Es gibt also Gründe den großen
CAs zu misstrauen&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:116aed65bb730b226540f3cd4bf4c27a:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:116aed65bb730b226540f3cd4bf4c27a:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;certificate-authority-erstellen:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Certificate Authority erstellen&lt;/h2&gt;

&lt;p&gt;Als erstes muss man einen geheimen privaten Schlüssel generieren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl genrsa -aes256 -out ca-key.pem 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Der Schlüssel wird in der Datei &lt;code&gt;ca-key.pem&lt;/code&gt; gespeichert und hat eine Länge von 4096 Bit. Man kann auch einen
längeren bzw. kürzeren Schlüssel erzeugen. 2048 Bit sehe ich als absolutes Minimum an. Durch Verwendung der
Option &lt;code&gt;-aes256&lt;/code&gt; wird der Schküssel mit einem Passwort geschützt. Der Schlüssel der CA muss besonderst
geschützt werden, denn mit ihm könnte sich ein Angreifer beliebige Zertifikate ausstellen. Die Verschlüsselung
mit einem Passwort bietet einen zusätzlichen Schutz. Das Passwort muss man bei jeder Verwendung des Schlüssels
eingeben.&lt;/p&gt;

&lt;p&gt;Als nächstes muss man das root-Zertifikat der CA erzeugen. Dieses kann man dann in die Browser und in die
Betriebssysteme importieren. Das Zertifikat wird wie folgt generiert:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl req -x509 -new -nodes -extensions v3_ca -key ca-key.pem -days 3650 -out ca-root.pem -sha512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dieses Zertifikat hat eine Gültigkeit von 10 Jahren (3650 Tage). Die Attribute der CA können wie folgt sein:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Country Name (2 letter code) [AU]:DE
State or Province Name (full name) [Some-State]:Saxony-Anhalt
Locality Name (eg, city) []:Halle (Saale)
Organization Name (eg, company) [Internet Widgits Pty Ltd]:bude
Organizational Unit Name (eg, section) []:IT
Common Name (eg, YOUR name) []:example.net
Email Address []:meine.email-adresse.net
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;root-zertifikat-auf-den-clients-importieren:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Root-Zertifikat auf den Clients importieren&lt;/h2&gt;

&lt;h3 id=&#34;debian-ubuntu:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Debian / Ubuntu&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo cp ca-root.pem /usr/share/ca-certificates/myca-root.crt
sudo dpkg-reconfigure ca-certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mozilla-firefox-thunderbird:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Mozilla Firefox / Thunderbird&lt;/h3&gt;

&lt;p&gt;Mozilla Firefox verwaltet Zertifikate selbst. Ein neues Zertifikat wird importiert unter &lt;em&gt;Einstellungen&lt;/em&gt; =&amp;gt; &lt;em&gt;Erweitert&lt;/em&gt; =&amp;gt; &lt;em&gt;Zertifikate&lt;/em&gt; =&amp;gt; &lt;em&gt;Zertifikate anzeigen&lt;/em&gt; =&amp;gt; &lt;em&gt;Zertifizierungsstellen&lt;/em&gt; =&amp;gt; &lt;em&gt;Importieren&lt;/em&gt;. Wählt die Datei &lt;code&gt;ca-root.pem&lt;/code&gt; aus. Wählt die Option &lt;em&gt;Dieser CA vertrauen, um Websites zu identifizieren&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;chromium-google-chrome:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Chromium / Google Chrome&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Einstellungen&lt;/em&gt; =&amp;gt; &lt;em&gt;Erweiterte Einstellungen anzeigen&lt;/em&gt; (unten) =&amp;gt; &lt;em&gt;HTTPS/SSL&lt;/em&gt; =&amp;gt; &lt;em&gt;Zertifikate verwalten&lt;/em&gt; =&amp;gt; &lt;em&gt;Zertifizierungsstellen&lt;/em&gt; =&amp;gt; &lt;em&gt;Importieren&lt;/em&gt; =&amp;gt; &lt;code&gt;ca-root-pem&lt;/code&gt; auswählen =&amp;gt; &lt;em&gt;Diesem Zertifikat zur Identifizierung von Websites vertrauen&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;ein-neues-zertifikat-ausstellen:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Ein neues Zertifikat ausstellen&lt;/h2&gt;

&lt;p&gt;Als erstes muss man sich wieder einen privaten Schlüssel erzeuge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl genrsa -out cert-key.pem 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bei den Zertifikaten sollte man in den meisten Fällen kein Passwort setzten. Wenn man es z.B. für einen Webserver benötigt,
dann müsste man das Passwort bei jedem Start eingeben.&lt;/p&gt;

&lt;p&gt;Nun muss man eine Zertifikatsanfrage erstellen. Ganz wichtig ist der &lt;strong&gt;Common Name&lt;/strong&gt; dieses Attribut &lt;em&gt;muss&lt;/em&gt; so lauten, wie der Hostname
des Servers, auf den es ausgestellt ist. Wenn man nur via IP zugreifen möchte, dann ist der Common Name die IP, mit den man den Dienst
ansprechen möchte. Es sind auch Wildcard-zertifikate möchte *.example.com gilt für foo.example.com bar.example.com, aber nicht für foo.bar.example.com.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl req -new -key cert-key.pem -out cert.csr -sha512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wenn man fertig ist, dann erhält man die Zertifikatsanfrage in &lt;code&gt;cert.csr&lt;/code&gt;, die kann von CA weiter verarbeitet werden. Dabei wird der öffentliche
Schlüssel des angefragten Zertifikats.&lt;/p&gt;

&lt;p&gt;Mit der root-CA, deren Schlüssel und der Zertifikatsanfrage erstellt man ein signiertes Zertifikat, welches 1 Jahr gültig ist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl x509 -req -in cert.csr -CA ca-root.pem -CAkey ca-key.pem -CAcreateserial -out cert-pub.pem -days 365 -sha512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Openssl fragt nach dem dem Passwort der root-CA. Wenn dan signierte Zertifikat erstellt wurde kann man die Zertifikatsanfrage &lt;code&gt;cert.csr&lt;/code&gt; löschen.
Das öffentliche Zertifikat befindet sich in der Datei &lt;code&gt;cert-pub.pem&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;das-zertifikat-benutzen:116aed65bb730b226540f3cd4bf4c27a&#34;&gt;Das Zertifikat benutzen&lt;/h2&gt;

&lt;p&gt;Für einen Webserver benötigt man die folgenden 3 Teile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Privater Schlüssel des Zertifikats &lt;code&gt;cert-key.pem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Öffentlicher Schlüssel des Zertifikats &lt;code&gt;cert-pub.pem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Öffentlicher Schlüssel der CA &lt;code&gt;ca-root.pem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je nach Server ist es nötig die CA und den öffentlichen Schlüssel in einer Datei zu haben. Das kann man wie folgt machen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat ca-root.pem &amp;gt;&amp;gt; cert-pub.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wenn sie SNI nicht unterstützen. Eine weitere Alternative sind SAN-Zertifikate (diese sind auf mehrere Subdomains ausgestellt), diese gibt es auch nicht für lau.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:116aed65bb730b226540f3cd4bf4c27a:1&#34;&gt;Seit TLS 1.0 kann man auch durch &lt;a href=&#34;https://de.wikipedia.org/wiki/Server_Name_Indication&#34;&gt;SNI&lt;/a&gt; mehrere Zertifikate nutzen. SNI unterstützen ältere Browser noch nicht, evtl. hat man auch mit Apps Probleme,
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:116aed65bb730b226540f3cd4bf4c27a:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:116aed65bb730b226540f3cd4bf4c27a:2&#34;&gt;Dazu muss sie aber aus seinen Browser und Betriebssystem löschen. Das ist nicht unbedingt sehr sinnvoll.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:116aed65bb730b226540f3cd4bf4c27a:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Update</title>
      <link>https://0rph3us.github.io/post/2015/07/update/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/07/update/</guid>
      <description>&lt;p&gt;Ich bin länger zum bloggen gekommen, da ich aktuell recht ausgelastet bin. Meine
letzten Beträge habe ich während der Zugfahrt zuwischen Halle und Leipzig
geschrieben. Da man in diesen Zügen kaum noch einen Sitzplatz bekommt, ist es
recht schwer im Zug zu schreiben.&lt;/p&gt;

&lt;p&gt;Ich kann nur sagen, dass die deutsche Bahn immer wieder Spaß macht&amp;hellip;&lt;/p&gt;

&lt;p&gt;Mein nächster Beitrag wird hoffentlich über Privoxy und Tor sein. Dieses Gespann
läuft schon eigige Zeit auf meinen Pi.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kaputtes System nach Restore mit Obnam</title>
      <link>https://0rph3us.github.io/post/2015/04/kaputtes-system-nach-restore-mit-obnam/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/04/kaputtes-system-nach-restore-mit-obnam/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://obnam.org/&#34;&gt;Obnam&lt;/a&gt; ist ein nettes Backup-Tool, welches ich auf meinen Laptop unter Ubuntu 14.04 verwende.
Ich wollte die Tage einen Restore von einer Datei machen und habe sie inplace wieder herstellen wollen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo obnam --generation=243130 restore --to=/  /etc/apt/sources.list.d/adiscon-v8-stable-trusty.list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Danach war meine aktuelle Session im Eimer und ich habe meinen Rechner neu gestartet. Danach gab es eine
große Überraschung: Ich konnte mich nicht mehr einloggen. Nach dem ersten Schreck, dass obnam vielleicht
die Platte geschrottet hat, habe ich mit &lt;a href=&#34;https://grml.org/&#34;&gt;grml&lt;/a&gt; auf die Platte geschaut. Alles war da. Nach einiger Zeit
habe ich festgestellt, dass obnam die Rechte von / auf 700 geändert hat. Nachdem ich / wieder auf 755 geändert
habe ging alles.&lt;/p&gt;

&lt;p&gt;Es ist leider reproduzierbar, dass obnam die Rechte alle Verzechnisse beim Restore kaputt macht, welche
es nicht unter Kontrolle hat. Aus diesem Grund mache ich einen Restore jetzt wie folgt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo obnam --generation=243130 restore --to=/home/rennecke/restore  /etc/apt/sources.list.d/adiscon-v8-stable-trusty.list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das aktuelle Verhalten ist ein absolutes No-Go! Ich verwende die Version 1.9 aus &lt;a href=&#34;https://launchpad.net/~chris-bigballofwax/+archive/ubuntu/obnam-ppa&#34;&gt;dieser PPA&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Danke Primacom</title>
      <link>https://0rph3us.github.io/post/2015/03/danke-primacom/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/03/danke-primacom/</guid>
      <description>&lt;p&gt;Dieser Blog liegt hier, da mich die Primacom genattet hatte, wie ich &lt;a href=&#34;https://0rph3us.github.io/post/2015/02/hallo-github/&#34;&gt;damals&lt;/a&gt; geschrieben habe.
Mein Bug-Ticket ist zwar nach wie vor unbearbeitet, aber ich habe jetzt wieder eine öffentliche
IP. Den Blog lasse ich erst einmal auf github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Einen DNS Server selbst betreiben</title>
      <link>https://0rph3us.github.io/post/2015/03/einen-dns-server-selbst-betreiben/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/03/einen-dns-server-selbst-betreiben/</guid>
      <description>

&lt;p&gt;Ich habe mir die Tage einen eigenen &lt;a href=&#34;http://de.wikipedia.org/wiki/Domain_Name_System&#34;&gt;DNS&lt;/a&gt;-Server aufgesetzt. Er macht das Leben einfacher, wenn
man mehrere Dienste im eigenen Netzwerk betreibt. Dazu habe ich &lt;a href=&#34;https://www.powerdns.com/&#34;&gt;PowerDNS&lt;/a&gt; mit einem &lt;a href=&#34;http://de.wikipedia.org/wiki/MySQL&#34;&gt;MySQL&lt;/a&gt;-Backend.
Das ganze lässt sich mit der Weboberfläche &lt;a href=&#34;http://www.poweradmin.org/&#34;&gt;poweradmin&lt;/a&gt; sehr einfach bedienen. Man sollte aber bedenken,
dass jeder Fehler ein komisches Verhalten zur Folge haben kann, wenn man z.B. &lt;a href=&#34;http://de.wikipedia.org/wiki/Zone_%28DNS%29&#34;&gt;Zone&lt;/a&gt; im DNS überschreibt.&lt;/p&gt;

&lt;p&gt;Die Installation auf dem &lt;a href=&#34;http://www.raspberrypi.org/help/what-is-a-raspberry-pi/&#34;&gt;Raspberry Pi&lt;/a&gt; mit &lt;a href=&#34;http://www.raspbian.org/&#34;&gt;Raspbian&lt;/a&gt; gestaltet sich realtiv einfach. Am besten macht macht
das ganze als &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation-von-mysql:816d60a4fac4f6ba0b121cbbf32c84d1&#34;&gt;Installation von MySQL&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mysql-server mysql-client php5-mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Danach habt Ihr MySQL installiert und auch den php Client, welchen wir später noch brauchen. Während
der Installation werdet ihr nach dem &lt;code&gt;root&lt;/code&gt;-Passwort für den MySQL Server gefragt.&lt;/p&gt;

&lt;h3 id=&#34;installation-von-powerdns:816d60a4fac4f6ba0b121cbbf32c84d1&#34;&gt;Installation von PowerDNS&lt;/h3&gt;

&lt;p&gt;Die Installation möchte Euch bei der Einrichtung der Datenbank behilflich sein. Aber wir konfigurieren
alles per Hand. Bei mir die automatische Konfiguration nicht so gut funktioniert.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo su
apt-get install pdns-server pdns-backend-mysql dnsutils
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;einrichten-der-datenbank:816d60a4fac4f6ba0b121cbbf32c84d1&#34;&gt;Einrichten der Datenbank&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE powerdns;
GRANT ALL ON powerdns.* TO powerdns@127.0.0.1 IDENTIFIED BY &#39;GeheimesPasswort&#39;;
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das muss man in die &lt;code&gt;mysql&lt;/code&gt; Konsole eintragen. Zu dieser gelangt man so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun importieren wir das Datenbank-Schema für PowerDNS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uroot -p powerdns &amp;lt; /usr/share/doc/pdns-backend-mysql/nodnssec-3.x_to_3.4.0_schema.mysql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;powerdns-konfigurieren:816d60a4fac4f6ba0b121cbbf32c84d1&#34;&gt;PowerDNS konfigurieren&lt;/h3&gt;

&lt;p&gt;Die Datei &lt;code&gt;/etc/powerdns/pdns.d/pdns.local.gmysql.conf&lt;/code&gt; muss wie folgt verändert werden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# MySQL Configuration
#
# Launch gmysql backend
launch+=gmysql

# gmysql parameters
gmysql-host=127.0.0.1
gmysql-port=3306
gmysql-dbname=powerdns
gmysql-user=powerdns
gmysql-password=GeheimesPasswort
gmysql-dnssec=yes
# gmysql-socket=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun muss  man sie noch schützen &lt;code&gt;sudo chmod 660 /etc/powerdns/pdns.d/pdns.local.gmysql.conf&lt;/code&gt;. Nun
wurder Der Server nur lokal funktionieren und nur seine eigenen Zonen auflösen können. Damit man
er auch noch über alle anderen Zonen Auskunft geben kann und jedes Gerät im LAN ihn nutzen kann
muss man ein paar Zeilen in der &lt;code&gt;/etc/powerdns/pdns.conf&lt;/code&gt; ändern
(sie sind schön auskommentiert enthälten, ohne Parameter).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;recursor=8.8.8.8

allow-recursion=127.0.0.1,192.168.0.0/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ich gehe davon aus, dass Euer LAN ein 192.168.0.0/24 Netz ist, sonst anpassen ;-).&lt;/p&gt;

&lt;h3 id=&#34;test:816d60a4fac4f6ba0b121cbbf32c84d1&#34;&gt;Test&lt;/h3&gt;

&lt;p&gt;Wenn alles funktioniert, dann kann man den DNS Server wie folgt testen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dig google.de @8.8.8.8  

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-3ubuntu0.2-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; google.de @127.0.0.1
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 49993
;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;google.de.                     IN      A

;; ANSWER SECTION:
google.de.              299     IN      A       173.194.32.255
google.de.              299     IN      A       173.194.32.248
google.de.              299     IN      A       173.194.32.239
google.de.              299     IN      A       173.194.32.247

;; Query time: 87 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Wed Mar 18 07:12:42 CET 2015
;; MSG SIZE  rcvd: 102
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;poweradmin-installieren:816d60a4fac4f6ba0b121cbbf32c84d1&#34;&gt;Poweradmin installieren&lt;/h3&gt;

&lt;p&gt;Damit man den DNS Server einfach/schnell bedienen kann, installiert man &lt;a href=&#34;http://www.poweradmin.org/&#34;&gt;poweradmin&lt;/a&gt;. Das ist
eine php-Anwendung mit der man seinen PowerDNS Server einfach konfigurieren kann.&lt;/p&gt;

&lt;p&gt;Als erstes installiert man einen Webserver und php. Auf dem Raspberry Pi macht sich in meinen
Augen &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; ganz gut. Wie man diesen installiert kann man in &lt;a href=&#34;https://0rph3us.github.io/post/2014/07/webserver-auf-dem-raspberry-pi-installieren/&#34;&gt;diesem Artikel&lt;/a&gt; nachlesen.&lt;/p&gt;

&lt;p&gt;Um mit der eigenlichen Installation zu beginnen muss man nich php-mcrypt installieren.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install php5-mcrypt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun beginnt die Installtion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo su
cd /var/www
wget https://github.com/poweradmin/poweradmin/archive/v2.1.7.zip
unzip v2.1.7.zip
rm v2.1.7.zip
mv poweradmin-2.1.7 poweradmin
cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/nginx/sites-available/powerdns
server {
    listen 80;
    server_name &amp;lt;IP des Raspberry Pi&amp;gt;;
    
    root /var/www/poweradmin;
    index index.html index.php;
    
    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ ^(.+\.php)(.*)$ {
        try_files $fastcgi_script_name =404;
        fastcgi_split_path_info  ^(.+\.php)(.*)$;
        fastcgi_pass   unix:/var/run/php5-fpm.sock;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_param  PATH_INFO        $fastcgi_path_info;
        include        /etc/nginx/fastcgi_params;
    }

    access_log      /var/log/nginx/poweradmin.access.log;
    error_log       /var/log/nginx/poweradmin.error.log;
}
EOF
ln -s /etc/nginx/sites-available/powerdns /etc/nginx/sites-enabled/powerdns
service nginx reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun kann man seinen Server einfach konfigurieren. Dazu öffnet man http://&lt;IP Raspberry Pi&gt; im Browser
und konfiguriert erst einmal Poweradmin und dann kann man gleich loslegen mit dem anlegfen von neuen
Zonen. Das ganze ist recht selbsterklärend.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>