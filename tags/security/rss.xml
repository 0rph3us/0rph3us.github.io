<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Michael im Netz</title>
    <link>https://0rph3us.github.io/tags/security/</link>
    <description>Recent content in Security on Michael im Netz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Diese Seite ist unter der &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt; lizenziert.</copyright>
    <lastBuildDate>Mon, 28 Dec 2015 22:37:08 +0100</lastBuildDate>
    <atom:link href="https://0rph3us.github.io/tags/security/rss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LibreSSL und HAProxy</title>
      <link>https://0rph3us.github.io/post/2015/12/libressl-und-haproxy/</link>
      <pubDate>Mon, 28 Dec 2015 22:37:08 +0100</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/12/libressl-und-haproxy/</guid>
      <description>

&lt;p&gt;Wenn man &lt;a href=&#34;https://www.raspbian.org/&#34;&gt;Raspbian&lt;/a&gt; einsetzt (oder eine fast beliebige andere Linux-Distribution)
hat man das &lt;em&gt;Problem&lt;/em&gt;, dass die mitgelieferten Webserver und Loadbalancer &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;
nutzen. OpenSSL ist 2015 durch eine Sicherheitslücken negativ aufgefallen, außerdem
gibt es keine Unterstützung&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; für &lt;a href=&#34;https://blog.cloudflare.com/do-the-chacha-better-mobile-performance-with-cryptography/&#34;&gt;ChaCha20 Cipher Suiten&lt;/a&gt;. Diese haben den Vorteil,
dass sie in Software schneller sind als &lt;a href=&#34;https://de.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES&lt;/a&gt;. Das macht sich insbesondere bei meinen
Raspberry Pi und bei Smartphones bemerkbar. Diese haben Hardware AES.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.libressl.org/&#34;&gt;LibreSSL&lt;/a&gt; ist eine Alternative zu OpenSSL. Es hat die Unterstützung für ChaCha20. Bei
LibreSSL liegt der Fokus auf Sicherheit und weniger auf die Unterstützung von alten
Schnittstellen. Deswegen ist davon auszugehen, dass es in der Zukunft auch weniger
kritische Sicherheitslücken geben wird.&lt;/p&gt;

&lt;h2 id=&#34;haproxy:bddda923aec4e8e8e36a0066c730c514&#34;&gt;HAProxy&lt;/h2&gt;

&lt;p&gt;In meinen Setup ist &lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt; vor dem Webserver (Nginx). Es ist vielleicht sinnlos
einen Loadbalancer auf dem Pi zu nutzen aber ich finde, dass sich HAProxy ein einigen
Stellen einfacher konfigurieren lässt als Nginx.&lt;/p&gt;

&lt;h2 id=&#34;libressl-bauen:bddda923aec4e8e8e36a0066c730c514&#34;&gt;LibreSSL bauen&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd
wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.1.tar.gz
tar xfvz libressl-2.3.1.tar.gz
cd libressl-2.3.1/
./configure
make -j 4
sudo make install
sudo ln -s /usr/local/lib/libssl.so.37 /usr/lib/libssl.so.37
sudo ln -s /usr/local/lib/libcrypto.so.36 /usr/lib/libcrypto.so.36
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# /usr/local/bin/openssl version
LibreSSL 2.3.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;haproxy-bauen:bddda923aec4e8e8e36a0066c730c514&#34;&gt;HAProxy bauen&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd 
git clone http://git.haproxy.org/git/haproxy-1.6.git/
cd haproxy-1.6/
git checkout v1.6.3
export LIBRESSL=/usr/local/
make TARGET=linux2628 USE_OPENSSL=1 SSL_INC=${LIBRESSL}/include SSL_LIB=${LIBRESSL}/lib ADDLIB=-ldl
sudo cp haproxy /usr/local/sbin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;todo:bddda923aec4e8e8e36a0066c730c514&#34;&gt;ToDo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Konfiguration von HAProxy&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;In den kommenden Versionen von OpenSSL wird es Unterstützung für ChaCha20 Cipher Suiten geben. Ich finde die Quelle gerade nicht :-(
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bddda923aec4e8e8e36a0066c730c514:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Passwortmanager</title>
      <link>https://0rph3us.github.io/post/2015/02/passwortmanager/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2015/02/passwortmanager/</guid>
      <description>

&lt;p&gt;Jeder kennt das Problem mit dem Passwörtern. Man sollte nicht überall das selbe Passwort verwenden,
außerdem sollte man es regelmäßig wechseln und dann muss es auch noch &lt;em&gt;komplex&lt;/em&gt; sein. Da ich mir
nicht 100 Passwörter merken kann, verwende ich einen Passwortmanager. Es gibt eine ganze Reihe
von solchen Tools, aber keins hat mich mich bis überzeugt.&lt;/p&gt;

&lt;h3 id=&#34;meine-anforderungen-sind:723e36c0d653eead54808cb1e59efd78&#34;&gt;Meine Anforderungen sind&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;einfach zu bedienen&lt;/li&gt;
&lt;li&gt;einfache synchronisation zwischen mehreren Geräten&lt;/li&gt;
&lt;li&gt;leichtgewichtig&lt;/li&gt;
&lt;li&gt;eine GUI ist nicht nötig&lt;/li&gt;
&lt;li&gt;Windowsunterstützung ist mir egal, da ich kein Windows nutze&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://keepass.info/&#34;&gt;KeePass 2&lt;/a&gt; würde meine meisten Anforderungen erfüllen. Aber ich werde mit dem Tool nicht wirklich warm. Ich finde auch, dass
es recht schwergewichtig ist, weil ich dafür noch &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; benötige, was ich sonst nicht auf meinen Rechnern habe.&lt;/p&gt;

&lt;h2 id=&#34;pass-der-standard-unix-passwortmanager:723e36c0d653eead54808cb1e59efd78&#34;&gt;pass - Der Standard Unix Passwortmanager&lt;/h2&gt;

&lt;p&gt;Nachdem ich &lt;a href=&#34;http://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt; gefunden habe, war ich glücklich. Dieser Passwortmanager hat alles was ich verlange.
Das schöne ist, dass pass auf Standarttools setzt. Die Daten werden mit &lt;a href=&#34;https://www.gnupg.org/&#34;&gt;GnuPG&lt;/a&gt; verschlüsselt und bei Bedarf
in einen &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt;-Repository versioniert. Durch die Verwendung von git ist es auch möglich die Passwörter über
verschiedene Clients hinweg zu sychronisieren.&lt;/p&gt;

&lt;p&gt;Man kann &lt;a href=&#34;http://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt; über die Paketverwaltung der meisten Distributionen installieren. Es ist auch ohne weiteres
möglich pass via git checkout zu installieren. Das geht deswegen so einfach, weil pass &lt;em&gt;nur&lt;/em&gt; ein Shell-Skript
ist, welches einige Standarttools sowie GnuPG und git nutzt.&lt;/p&gt;

&lt;h3 id=&#34;anwendung:723e36c0d653eead54808cb1e59efd78&#34;&gt;Anwendung&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pass init EE75C6FE
mkdir: created directory ‘/home/rennecke/.password-store’
Password store initialized for EE75C6FE Password Storage Key.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es wird eine leere Passwortdatenbank erstellt und zum verschküsseln der Passwörter wird der GnuPG Key &lt;code&gt;EE75C6FE&lt;/code&gt;
verwenden. Man kann den Key auch mit der dazugehörigen Emailadresse angeben.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pass git init 
Initialized empty Git repository in /home/rennecke/.password-store/.git/ 
[master (root-commit) 998c8fd] Added current contents of password store. 
1 file changed, 1 insertion(+) 
create mode 100644 .gpg-id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jetzt wird noch leere Passwortdatenbank unter Versionskontrolle genommen. Nun kann alle Möglichkeiten
von git nutzen. Die &lt;code&gt;&amp;lt;parameter&amp;gt;&lt;/code&gt; von &lt;code&gt;pass git &amp;lt;parameter&amp;gt;&lt;/code&gt; sind alle möglichen Parameter, welche git
aktzeptiert, &lt;code&gt;pass&lt;/code&gt; alles was nach git kommt 1:1 an &lt;code&gt;git&lt;/code&gt; weiter.&lt;/p&gt;

&lt;p&gt;An dieser Stelle möchte ich nicht die Dokumentation von pass abschreiben, da ich es auch recht intuitiv finde. Man
kann sich &lt;a href=&#34;http://git.zx2c4.com/password-store/about/#EXTENDED%20GIT%20EXAMPLE&#34;&gt;hier&lt;/a&gt; einen Überblick verschaffen.&lt;/p&gt;

&lt;h3 id=&#34;android-app:723e36c0d653eead54808cb1e59efd78&#34;&gt;Android App&lt;/h3&gt;

&lt;p&gt;Für alle Android-Nutzer gibt es noch ein richtiges Sahnestück, die App &lt;a href=&#34;https://github.com/zeapo/Android-Password-Store&#34;&gt;Password Store&lt;/a&gt;. Sie überzeugt mich, durch ein
gutes Bedienkonzept und sie kann alle Funktionen von pass nutzen. Sie unterstützt auch mit einem Passwort gesicherte
ssh-Schlüssel. Zur Verwaltung der GnuPG-Schlüssel nutzte ich &lt;a href=&#34;http://www.openkeychain.org/&#34;&gt;OpenKeychain&lt;/a&gt;. OpenKeychain unterstüzt selbstverständlich
auch mit einem Passwort gesicherte private Schlüssel.&lt;/p&gt;

&lt;h3 id=&#34;nachtrag:723e36c0d653eead54808cb1e59efd78&#34;&gt;Nachtrag&lt;/h3&gt;

&lt;p&gt;Wie ihr im letzten Absatz bemerkt habt, muss ich mir trotzdem 2 Passwörter merken und bei KeyPass 2 ist es nur ein Passwort.
Das ist aber kein Nachteil in meinen Augen. Jeder der ssh- und GnuPG-Schlüssel nutzt sollte sie mit einen Passwort sichern,
falls das Gerät, auf dem sich der Schlüssel befindet kompromitiert wird. Die Passwörter muss man sich einfach merken, wenn
man täglich diese Schlüssel nutzt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RSS Reader selbst betreiben</title>
      <link>https://0rph3us.github.io/post/2014/09/rss-reader-selbst-betreiben/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/09/rss-reader-selbst-betreiben/</guid>
      <description>

&lt;p&gt;Nach meinen Wissen gab es eine Zeit, in der RSS-Feeds als Old-School und damit
als nicht mehr zeitgemäß galten. Ich finde, dass sie zur Zeit immer beliebter
werden. Ich möchte meine Feeds immer dabei und nicht viele Apps auf dem Smartphone
installieren, nur um meinen 20 News-Seiten zu folgen. Das ganze im Browser zu
lesen kann auf mobilen Devices nervig werden, entweder ist die mobile Seite nicht
wirklich brauchbar oder man hat zu viele Seite, welche man lesen möchte.&lt;/p&gt;

&lt;p&gt;Da viele Seiten einen &lt;a href=&#34;http://de.wikipedia.org/wiki/Web-Feed&#34;&gt;Feed&lt;/a&gt; anbieten, kann man diese abonnieren und in einen
Feed-Reader zusammen führen. Es gibt Menschen, wie mich, die keinen Reader wie
&lt;a href=&#34;http://feedly.com/&#34;&gt;Feedly&lt;/a&gt; nutzen möchten.&lt;/p&gt;

&lt;p&gt;Mit einem &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; kann man einfach selbst einen RSS-Reader an der heimischen
DSL-Leitung betreiben. Dazu benutze ich &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; als Webserver, &lt;a href=&#34;http://www.mysql.de/&#34;&gt;MySQL&lt;/a&gt; als Datenbank
sowie &lt;a href=&#34;http://tt-rss.org/&#34;&gt;Tiny Tiny RSS&lt;/a&gt; als Reader. Als Betriebssystem nutze ich Raspbian.&lt;/p&gt;

&lt;h2 id=&#34;nginx-installieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Nginx installieren&lt;/h2&gt;

&lt;p&gt;Wie man &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; installiert, habe ich in &lt;a href=&#34;https://0rph3us.github.io/post/2014/07/webserver-auf-dem-raspberry-pi-installieren/&#34;&gt;diesem Artikel&lt;/a&gt; schon erklärt.
Je nach dem wie paranoid bzw. nerdig man ist, sollte man die Verbindung noch
mit SSL/TLS absichern.&lt;/p&gt;

&lt;h2 id=&#34;mysql-installieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;MySQL installieren&lt;/h2&gt;

&lt;p&gt;Die grundlegende Installation von MySQL geht leicht von der Hand. Da man nur einige
Pakte installieren muss. Die nötige Datenbank ist auch schnell eingerichtet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden
sudo su -

apt-get update
apt-get install mysql-server mysql-client php5-mysql php5-curl

# Datenbanken einrichten
mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
[...]
mysql&amp;gt; CREATE DATABASE ttrss;
Query OK, 1 row affected (0.01 sec)
 
mysql&amp;gt; GRANT ALL ON ttrss.* TO ttrss@localhost IDENTIFIED BY &#39;GeheimesPasswort&#39;;
Query OK, 0 rows affected (0.02 sec)
 
mysql&amp;gt; exit
Bye
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysql-härten:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;MySQL härten&lt;/h3&gt;

&lt;p&gt;Mit dem folgenden Tool kann man seine MySQL noch härten. Dazu löscht
es die Test-Datenbanken und anonyme Benutzer. Weiterhin ist ein
Remote Login für den Benutzer &lt;code&gt;root&lt;/code&gt; nicht mehr möglich.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden
sudo su -
mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tiny-tiny-rss-installieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Tiny Tiny RSS installieren&lt;/h2&gt;

&lt;p&gt;Man lädt sich die &lt;a href=&#34;https://github.com/gothfox/Tiny-Tiny-RSS/releases&#34;&gt;aktuellste Version&lt;/a&gt; von &lt;a href=&#34;http://tt-rss.org/&#34;&gt;Tiny Tiny RSS&lt;/a&gt; in das Document Root-Verzeichnis
von Nginx und entpackt es&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden
sudo su -
cd /usr/share/nginx/www
wget https://github.com/gothfox/Tiny-Tiny-RSS/archive/1.13.tar.gz
tar xfvz 1.13.tar.gz
mv Tiny-Tiny-RSS-1.13/ tt-rss/
chown -R www-data:www-data tt-rss/
rm 1.13.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nachdem man das alles gemacht hat, führt man die Installation von Tiny Tiny RSS im Browser fort. Dazu
&lt;code&gt;http(s)://IP/tt-rss/install/&lt;/code&gt;
Dort wählen wir MySQL in dem Feld &lt;em&gt;Database type&lt;/em&gt;, geben als &lt;em&gt;Username&lt;/em&gt; und &lt;em&gt;Database name&lt;/em&gt;
&lt;em&gt;ttrss&lt;/em&gt; an und geben das Passwort, welches für den MySQL Benutzer &lt;em&gt;ttrss&lt;/em&gt; angelegt hat,
in das Feld &lt;em&gt;Password&lt;/em&gt; ein. Der Port ist 3306. In das Feld &lt;em&gt;Host name&lt;/em&gt; schreiben wir 127.0.0.1
Anschließend klicken wir auf &lt;em&gt;Test configuration&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Wenn alles richtig war, dann erscheint &lt;em&gt;Database test succeeded&lt;/em&gt;. Nach einem Klick auf
&lt;em&gt;Initialize database&lt;/em&gt; können wir aus der Textbox die Konfiguration kopieren.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo su -
cat &amp;lt;&amp;lt; EOF &amp;gt; /usr/share/nginx/www/tt-rss/config.php
kopierten Text hier einfügen
EOF  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;feeds-aktualisieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Feeds aktualisieren&lt;/h3&gt;

&lt;p&gt;Dazu muss man die folgende Zeile in die &lt;code&gt;crontab&lt;/code&gt; von &lt;code&gt;root&lt;/code&gt; eintragen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/30 * * * * su www-data -s /bin/bash -c &#39;/usr/bin/php /var/www/tt-rss/update.php --feeds --quiet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tiny-tiny-rss-für-das-smartphone:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Tiny Tiny RSS für das Smartphone&lt;/h2&gt;

&lt;p&gt;Es gibt zwei Android Clients für Tiny Tiny RSS. Diese haben beide den Nachteil, dass sie unter Umständen
Probleme mit den Ciphers der SSL Verschlüsselung haben. Da das bei mir der Fall war bin ich auf eine HTML
App umgestiegen, welche auch noch auf meinen Raspberry Pi läuft. Dazu muss man nur &lt;a href=&#34;https://github.com/mboinet/ttrss-mobile/archive/1.0-1.tar.gz&#34;&gt;dieses Archiv&lt;/a&gt; herunter
laden und entpacken, alternativ kann man auch das &lt;a href=&#34;https://github.com/mboinet/ttrss-mobile&#34;&gt;dazugehörige git-Repository&lt;/a&gt; klonen.&lt;/p&gt;

&lt;p&gt;Man muss vorher sicherstellen, dass der API-Zugriff zu Tiny Tiny RSS erlaubt ist. Man loggt sich als ersten
in TT-RSS ein und klickt dann auf &lt;em&gt;Aktionen&lt;/em&gt; -&amp;gt; &lt;em&gt;Einstellungen&lt;/em&gt; und &lt;em&gt;Aktiviere API-Zugang&lt;/em&gt; muss ein grünes
Häkchen haben (wenn nicht anklicken).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo su -
cd /usr/share/nginx/www
wget https://github.com/mboinet/ttrss-mobile/archive/1.0-1.tar.gz
tar xfvz 1.0-1.tar.gz
mv ttrss-mobile-1.0-1 mobile
cp mobile/scripts/conf.js{-dist,}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun kann man unter &lt;code&gt;http(s)://IP/mobile/&lt;/code&gt; die HTML5 Anwendung für das Smartphone erreichen.&lt;/p&gt;

&lt;h2 id=&#34;schlussbemerkung:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Schlussbemerkung&lt;/h2&gt;

&lt;p&gt;Soll der soeben installierte Dienst auch außerhalb des eigenen Netzwerkes verfügbar sein, so müssen
folgende Ports (80 und 443) im Router freigegeben werden.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome und selbst signierte Zertifikate</title>
      <link>https://0rph3us.github.io/post/2014/08/chrome-und-selbst-signierte-zertifikate/</link>
      <pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/08/chrome-und-selbst-signierte-zertifikate/</guid>
      <description>

&lt;p&gt;Heute habe ich festgestellt, dass Google den &lt;a href=&#34;http://www.google.de/intl/de/chrome/browser/&#34;&gt;Chrome&lt;/a&gt;-Browser (Version 37.0.2062.94 (64-Bit))
verhunzt hat. Es gibt jetzt einen &lt;strong&gt;Privacy Error&lt;/strong&gt; wenn eine Seite, wie dieser Blog,
ein selbst signiertes SSL-Zertifikat benutzt. Bis jetzt gab es einen &lt;strong&gt;SSL Error&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;chromium:c1300b2c90762b5984abb067105b084d&#34;&gt;Chromium&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;The site&#39;s security certificate is not trusted!

You attempted to reach blog.rennecke.dyndns.dk, but the server presented a certificate
issued by an entity that is not trusted by your computer&#39;s operating system. This may 
mean that the server has generated its own security credentials, which Chromium cannot 
rely on for identity information, or an attacker may be trying to intercept your communications.

You should not proceed, especially if you have never seen this warning before for this site.

Proceed anyway       Back to safety
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;chome-jetzt:c1300b2c90762b5984abb067105b084d&#34;&gt;Chome jetzt&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Your connection is not private

Attackers might be trying to steal your information from blog.rennecke.dyndns.dk 
(for example, passwords, messages, or credit cards).

advanced    Back to safety
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Diese Meldung finde ich unter aller Sau! Verdient Google auch an den Zertifikatverkäufen oder weswegen
muss der Hinweis so drastisch ausfallen, dass ein nicht technikaffiner Nutzer nicht mehr auf meinen
Blog kommt? Erst wenn man &lt;em&gt;advanced&lt;/em&gt; ausklappt hat man die Möglichkeit auf die Seit zu kommen. In
Zeiten von Abhörskandalen darf man nicht selbst signierte Zertifikate boykottieren. So wächst nur
die Hemmschwelle SSL einzusetzen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sichere E-Mails</title>
      <link>https://0rph3us.github.io/post/2013/10/sichere-e-mails/</link>
      <pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2013/10/sichere-e-mails/</guid>
      <description>&lt;p&gt;Nachdem ich &lt;a href=&#34;http://www.golem.de/news/gesellschaft-fuer-informatik-wir-brauchen-sichere-standardisierung-der-verschluesselung-1310-101928.html&#34;&gt;diesen Beitrag auf golem.de&lt;/a&gt;
gelesen habe, ist mir wieder die ganze Misere mit &lt;a href=&#34;http://www.de-mail.de&#34;&gt;De-Mail&lt;/a&gt; und dem NSA-Skandal hoch gekommen.&lt;/p&gt;

&lt;p&gt;Vielleicht denke ich zu einfach, oder habe anderen Denkfehler, aber kann Sicherheit und
&lt;a href=&#34;http://de.wikipedia.org/wiki/Ende-zu-Ende-Verschl%C3%BCsselung&#34;&gt;Ende-zu-Ende-Verschlüsselung&lt;/a&gt; nicht einfach sein?
Ich nutze seit einigen Jahren &lt;a href=&#34;http://www.gnupg.org/&#34;&gt;GnuPG&lt;/a&gt; und &lt;a href=&#34;https://www.enigmail.net&#34;&gt;Enigmail&lt;/a&gt; für &lt;a href=&#34;http://www.thunderbird-mail.de/&#34;&gt;Thunderbird&lt;/a&gt;.
Damit ist es mir und meinen Kommunikationspartnern möglich, dass wir die Mails signieren und verschlüsseln können.
Ich gebe zu, dass die Verwendung etwas komplizierter ist, als eine normale Mail ist. Im Großen und Ganzen halte
ich das Verfahren für E-Mail-Provider und Behörden umsetzbar und ein Dritter hat es schwer die Nachricht zu lesen
bzw. verändern.  Es ist Möglich, dass man Keys widerrufen kann und, dass man sie austauscht.&lt;/p&gt;

&lt;p&gt;Die Dinge, die oben beschrieben sind, sind doch Anforderungen für eine moderne verschlüsselte Mail. Weswegen wir das neu erfunden,
anstatt etwas vorhandenes zu vereinfachen bzw. Regeln über Algorithmen und Schlüssellängen festlegen?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neuer GPG-Key</title>
      <link>https://0rph3us.github.io/post/2013/09/neuer-gpg-key/</link>
      <pubDate>Mon, 09 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2013/09/neuer-gpg-key/</guid>
      <description>&lt;p&gt;Nach den ganzen &lt;a href=&#34;http://www.nsa.gov/&#34;&gt;NSA&lt;/a&gt;-Enthüllungen, habe ich mich wieder mit Public-Key-Kryptografie beschäftigt. Mein bisheriger &lt;a href=&#34;http://www.gnupg.org/&#34;&gt;GPG&lt;/a&gt;-Schüssel D12E87BA hat &lt;a href=&#34;http://www.itl.nist.gov/fipspubs/fip186.htm&#34;&gt;DSA&lt;/a&gt; und &lt;a href=&#34;http://de.wikipedia.org/wiki/Elgamal-Verschl%C3%BCsselungsverfahren&#34;&gt;ElGamal&lt;/a&gt; verwendet. Ich habe damals diese Algorithmen damals gewählt, da ich keinen &#34;Standard-Key&#34; haben wollte. Die Längen sind auch nach heutigen Maßstäben ausreichend. Es aber &lt;a href=&#34;http://rdist.root.org/2010/11/19/dsa-requirements-for-random-k-value/&#34;&gt;Angriffe für DSA&lt;/a&gt;, welche darauf beruhen, dass die Zufallszahlen von Zufallszahlengeneratoren nicht zufällig sind. Da ich meinen Schlüssel auf beliebigen Rechnern und auch Endgeräten nutzen möchte, kann ich nicht immer sicher stellen, dass der Zufallszahlengenerator wirklich korrekt seine Arbeit macht. Aus diesem Grund habe ich mir ein neues Schlüsselpaar mit &lt;a href=&#34;http://de.wikipedia.org/wiki/RSA-Kryptosystem&#34;&gt;RSA&lt;/a&gt; zum verschlüsseln und signieren erstellt.&lt;/p&gt;
&lt;p&gt;Es ist nicht ganz unwahrscheinlich, dass &lt;a href=&#34;http://news.cnet.com/8301-13578_3-57591560-38/facebooks-outmoded-web-crypto-opens-door-to-nsa-spying/&#34;&gt;große Organisationen 1024 Bit RSA Schüssel faktorisieren&lt;/a&gt; können. Ein Schlüssellänge von 2048 Bit gilt als sicher und 4096 Bit als paranoid. Ich bin lieber paranoid und nehme 4096 lange Schlüssel, da diese Schüssellänge auf heutigen Rechnern kein Problem darstellt und von fast allen Implementieren von GPG unterstützt wird.&lt;/p&gt;
&lt;p&gt;Mein neuer Key ist &lt;a href=&#34;http://pgp.mit.edu:11371/pks/lookup?op=vindex&amp;amp;search=0x617EB806EE75C6FE&#34;&gt;EE75C6FE&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>verschlüsselte Volumes bequem mounten</title>
      <link>https://0rph3us.github.io/post/2011/03/verschl%C3%BCsselte-volumes-bequem-mounten/</link>
      <pubDate>Sat, 26 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2011/03/verschl%C3%BCsselte-volumes-bequem-mounten/</guid>
      <description>&lt;p&gt;Ich habe mein home verschlüsselt. Dieses wird automatisch, beim anmelden gemountet.
Da ich in mein home noch ein paar andere verschlüsselte Dateisysteme einhänge funktionieren die Standard-Mittel,
wie &lt;code&gt;/etc/crypttab&lt;/code&gt; nicht. Dabei ergibt sich das folgende Problem: Die Volumes werden beim booten eingehangen
und zu diesen Zeitpunkt existiert mein home noch nicht.&lt;/p&gt;

&lt;p&gt;Da ich &lt;em&gt;faul&lt;/em&gt; bin möchte ich auch möglichst wenig Passwörter eingeben, weiterhin soll meine Freundin
auch den Rechner anmachen können und nicht an meinen Passwort scheitern. Deswegen wird nur mein
home via Passwort entschlüsselt, für die anderen Dateisysteme kommen &lt;em&gt;key-files&lt;/em&gt; zum Einsatz. Diese
liegen in meinen &lt;strong&gt;verschlüsselten&lt;/strong&gt; home.&lt;/p&gt;

&lt;p&gt;Da ich mir selbst nicht vertraue, möchte ich den &lt;a href=&#34;http://linux.die.net/man/8/sudo&#34;&gt;sudo&lt;/a&gt;-Mechanismus
oder &lt;a href=&#34;http://linux.die.net/man/2/setuid&#34;&gt;suid&lt;/a&gt;-Bits nicht benutzten. Deswegen habe ich mir die beiden
Skripte &lt;code&gt;cryptdisks_start&lt;/code&gt; und &lt;code&gt;cryptdisks_stop&lt;/code&gt; genauer angesehen. In einen ersten Schritt habe ich mir eine
&lt;code&gt;/etc/user_crypttab&lt;/code&gt; erzeugt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@walhalla ~ # cat /etc/user_crypttab
# definition             volume                        key                                   options      mountpoint                mountoptions
data--group-video_crypt  /dev/mapper/data--group-video /home/rennecke/key-files/video-key    luks         /home/rennecke/Videos     noatime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die ersten vier Parameter entsprechen denen, der &lt;a href=&#34;http://linux.die.net/man/5/crypttab&#34;&gt;crypttab&lt;/a&gt;,
&lt;em&gt;mountpoint&lt;/em&gt; und &lt;em&gt;mountoptions&lt;/em&gt; sind entsprechen den gleichnamigen Optionen von
&lt;a href=&#34;http://linux.die.net/man/8/mount&#34;&gt;mount&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mein &lt;code&gt;user_cryptdisks_start&lt;/code&gt;-Skript sieht wie folgt aus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh

# user_cryptdisks_start - wrapper around cryptsetup which parses
# /etc/user_crypttab, just like mount parses /etc/fstab.

# Initial code stolen from cryptdisks_start by Jon Dowland &amp;lt;jon@alcopop.org&amp;gt;
# Copyright (C) 2011 by Michael Rennecke &amp;lt;michael_rennecke@gmx.net&amp;gt;
# License: GNU General Public License, v2 or any later
# (http://www.gnu.org/copyleft/gpl.html)

CRYPTTAB=&amp;quot;/etc/user_crypttab&amp;quot;

set -e

if [ $# -lt 1 ]; then
	echo &amp;quot;usage: $0 &amp;lt;name&amp;gt;&amp;quot; &amp;gt;&amp;amp;2
	echo &amp;gt;&amp;amp;2
	echo &amp;quot;reads $CRYPTTAB and starts the mapping corresponding to &amp;lt;name&amp;gt;&amp;quot; &amp;gt;&amp;amp;2
	exit 1
fi

. /lib/cryptsetup/cryptdisks.functions

INITSTATE=&amp;quot;manual&amp;quot;
DEFAULT_LOUD=&amp;quot;yes&amp;quot;

if [ -x &amp;quot;/usr/bin/id&amp;quot; ] &amp;amp;&amp;amp; [ &amp;quot;$(/usr/bin/id -u)&amp;quot;  != &amp;quot;0&amp;quot; ]; then
	log_warning_msg &amp;quot;$0 needs root privileges&amp;quot;
	exit 1
fi

log_action_begin_msg &amp;quot;Starting crypto disk&amp;quot;
mount_fs


count=0
tablen=&amp;quot;$(egrep -vc &amp;quot;^[[:space:]]*(#|$)&amp;quot; &amp;quot;$CRYPTTAB&amp;quot;)&amp;quot;
egrep -v &amp;quot;^[[:space:]]*(#|$)&amp;quot; &amp;quot;$CRYPTTAB&amp;quot; | while read dst src key opts mnt mopts; do
	count=$(( $count + 1 ))
	echo &amp;quot;&amp;quot;
	if [ &amp;quot;$1&amp;quot; = &amp;quot;$dst&amp;quot; ]; then
		ret=0
		handle_crypttab_line_start &amp;quot;$dst&amp;quot; &amp;quot;$src&amp;quot; &amp;quot;$key&amp;quot; &amp;quot;$opts&amp;quot; &amp;lt;&amp;amp;3 || ret=$?
		echo &amp;quot;&amp;quot;
		fsck -pv /dev/mapper/$dst
		echo &amp;quot;&amp;quot;
		mount -o $mopts /dev/mapper/$dst $mnt
	elif [ $count -ge $tablen ]; then
		ret=1
		device_msg &amp;quot;$1&amp;quot; &amp;quot;failed, not found in user_crypttab&amp;quot;
	else
		continue
	fi
	umount_fs
	log_action_end_msg $ret
	exit $ret
done 3&amp;lt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zum Schluss noch mein  &lt;code&gt;user_cryptdisks_stop&lt;/code&gt;-Skript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh

# user_cryptdisks_stop - wrapper around cryptsetup which parses
# /etc/user_crypttab, just like mount parses /etc/fstab.

# Initial code stolen from cryptdisks_stop by Jonas Meurer &amp;lt;jonas@freesources.org&amp;gt;
# Copyright (C) 2011 by Michael Rennecke &amp;lt;michael_rennecke@gmx.net&amp;gt;
# License: GNU General Public License, v2 or any later
# (http://www.gnu.org/copyleft/gpl.html)

CRYPTTAB=/etc/user_crypttab

set -e

if [ $# -lt 1 ]; then
	echo &amp;quot;usage: $0 &amp;lt;name&amp;gt;&amp;quot; &amp;gt;&amp;amp;2
	echo &amp;gt;&amp;amp;2
	echo &amp;quot;reads $CRYPTTAB and stops the mapping corresponding to &amp;lt;name&amp;gt;&amp;quot; &amp;gt;&amp;amp;2
	exit 1
fi

. /lib/cryptsetup/cryptdisks.functions

INITSTATE=&amp;quot;manual&amp;quot;
DEFAULT_LOUD=&amp;quot;yes&amp;quot;

if [ -x &amp;quot;/usr/bin/id&amp;quot; ] &amp;amp;&amp;amp; [ &amp;quot;$(/usr/bin/id -u)&amp;quot;  != &amp;quot;0&amp;quot; ]; then
	log_warning_msg &amp;quot;$0 needs root privileges&amp;quot;
	exit 1
fi

log_action_begin_msg &amp;quot;Stopping crypto disk&amp;quot;
echo &amp;quot;&amp;quot;

count=0
tablen=&amp;quot;$(egrep -vc &amp;quot;^[[:space:]]*(#|$)&amp;quot; &amp;quot;$CRYPTTAB&amp;quot;)&amp;quot;
egrep -v &amp;quot;^[[:space:]]*(#|$)&amp;quot; &amp;quot;$CRYPTTAB&amp;quot; | while read dst src key opts mnt mopts; do
	count=$(( $count + 1 ))
	if [ &amp;quot;$1&amp;quot; = &amp;quot;$dst&amp;quot; ]; then
		umount $mnt

		ret=0
		handle_crypttab_line_stop &amp;quot;$dst&amp;quot; &amp;quot;$src&amp;quot; &amp;quot;$key&amp;quot; &amp;quot;$opts&amp;quot; &amp;lt;&amp;amp;3 || ret=$?
	elif [ $count -ge $tablen ]; then
		ret=1
		device_msg &amp;quot;$1&amp;quot; &amp;quot;failed, not found in user_crypttab&amp;quot;
	else
		continue
	fi
	log_action_end_msg $ret
	exit $ret
done 3&amp;lt;&amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die beiden Skripte kann nun &lt;code&gt;root&lt;/code&gt; ausführen, um Dateisysteme einzuhängen. Bei jeden einhängen
wird geschaut, ob ein &lt;a href=&#34;http://linux.die.net/man/8/fsck&#34;&gt;fsck&lt;/a&gt; nötig ist.
Mein Dank gilt &lt;a href=&#34;https://blog.meet-unix.org/&#34;&gt;meet-unix&lt;/a&gt;, er hat stand mit mit Rat zu
Seite, da ich noch etwas &lt;em&gt;Solaris&lt;/em&gt;-geschädigt bin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Sichere&#34; Captchas programmieren</title>
      <link>https://0rph3us.github.io/post/2010/08/sichere-captchas-programmieren/</link>
      <pubDate>Wed, 18 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2010/08/sichere-captchas-programmieren/</guid>
      <description>&lt;p&gt;
Man möchte manchmal Teile seiner Seite mittels Captchas schützen. Es gibt zahlreiche fertige Varianten, auch für wordpress. Diese haben fast immer den Nachteil, dass sie &lt;a href=&#34;http://de.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;http://www.adobe.com/support/documentation/de/flash/&#34;&gt;Flash&lt;/a&gt;, oder &lt;a href=&#34;http://www.w3.org/TR/WD-session-id&#34;&gt;Sessions&lt;/a&gt; benutzen. Persönlich habe ich eine Abneigung gegen &lt;a href=&#34;http://de.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt; und &lt;a href=&#34;http://www.adobe.com/support/documentation/de/flash/&#34;&gt;Flash&lt;/a&gt;. &lt;a href=&#34;http://www.w3.org/TR/WD-session-id&#34;&gt;Sessions&lt;/a&gt; lassen sich nicht immer nachträglich nutzen und man erzeugt serverseitig etwas Last. Fakt ist, dass ich keine Sessions mag! Das schlimmste an fertigen Captcha-Lösungen ist der zum Teil invalide html-Code. Ich möchte validen &lt;a href=&#34;http://www.w3.org/TR/xhtml1/&#34;&gt;xhtml 1.0 strict&lt;/a&gt;-Code haben und das Captcha sollte in mein Design passen. Wenn man die ganzen Anforderungen erfüllt haben möchte, so muss man wohl oder übel sein Captcha selbst programmieren.&lt;/p&gt;
&lt;h2&gt;Wie komme ich zum sicheren Captcha&lt;/h2&gt;
&lt;p&gt;Wenn ich auf Sessions verzichten möchte, so muss ich die Lösung des Captcha mit auf die Seite schreiben. Das kann man in einen &lt;em&gt;nicht sichtbaren&lt;/em&gt; Feld machen. Damit man dieses Feld nicht so einfach auslesen kann, schreibt man einen &lt;a href=&#34;http://burtleburtle.net/bob/hash/index.html&#34;&gt;Hash&lt;/a&gt; hinein bzw. man verschlüsselt den Inhalt.&lt;/p&gt;
&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;
define(KEY, &#34;Ich bin ein Key&#34;);
define(IV, &#34;KlyV6gxG3MOPzlfuj8azF6sKKTnsdsiN58i0zjHA0EU=&#34;);

function Crypt($plaintext){
    $td = mcrypt_module_open(&#39;rijndael-256&#39;, &#39;&#39;, &#39;ofb&#39;, &#39;&#39;);

    $iv = base64_decode(IV);
    $ks = mcrypt_enc_get_key_size($td);

     /* Create key */
    $key = substr(md5(KEY), 0, $ks);

    /* Intialize encryption */
    mcrypt_generic_init($td, $key, $iv);

    /* Encrypt data */
    $encrypted = mcrypt_generic($td, $plaintext);

    /* Terminate decryption handle and close module */
    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);

    return base64_encode($encrypted);
}

function Decrypt($chiffre){
    $td = mcrypt_module_open(&#39;rijndael-256&#39;, &#39;&#39;, &#39;ofb&#39;, &#39;&#39;);

    $iv = base64_decode(IV);
    $ks = mcrypt_enc_get_key_size($td);

     /* Create key */
    $key = substr(md5(KEY), 0, $ks);

    $chiffre = base64_decode($chiffre);
    mcrypt_generic_init($td, $key, $iv);
    $plaintext = mdecrypt_generic($td, $chiffre);

    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);

    return $plaintext;
}

function draw_captcha_form(){
    .....
    $time = time() + 60*30;
    $captchaSolution = &#34;Test&#34;
    echo &#34;\t\n\tBitte Captcha lösen&lt;br /&gt;\n&#34;;
    // erzeuge ein Captcha
    echo &#34;\t\n&#34;;
    echo &#34;\t&#34; . &#39;
&lt;input name=&#34;captvalue&#34; id=&#34;captvalue&#34; value=&#34;&#34; size=&#34;40&#34; tabindex=&#34;4&#34; type=&#34;text&#34; /&gt;&#39; . &#34;\n&#34;;
    echo &#34;\t&#34;    . &#39;
&lt;input name=&#34;captcha&#34; value=&#34;&#39;. Crypt($time . &#34;~&#34; . $captchaSolution . &#34;~&#34; . $REMOTE_ADDR) . &#39;&#34; type=&#34;hidden&#34;/&gt;&#39; . &#34;\n&#34;;
}

function check_post($) {
    ....
    $captcha = $_POST[&#39;captvalue&#39;];
    list($timeOld, $secret, $addr) = explode(&#39;~&#39;,Decrypt($_POST[&#39;captcha&#39;]));
    ....
    if($timeOld &lt;= time()){
            echo &#34;Deine Zeit ist abgelaufen&#34;;
            return;
    }
    if($addr != $REMOTE_ADDR){
            echo &#34;Falsche IP&#34;;
            return;
    }
    if($secret != $captcha){
            echo &#34;Falsches Captcha&#34;;
            return;
    }
    .....
}
&lt;/pre&gt;
&lt;p&gt;
Mit diesen Ideen kann man sich nun sein eigenes Captcha zusammen bauen. Ich generiere z.B. Matheaufgaben.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>