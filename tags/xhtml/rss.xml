<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xhtml on Michael im Netz</title>
    <link>https://0rph3us.github.io/tags/xhtml/</link>
    <description>Recent content in Xhtml on Michael im Netz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Diese Seite ist unter der &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt; lizenziert.</copyright>
    <lastBuildDate>Wed, 18 Aug 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://0rph3us.github.io/tags/xhtml/rss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>&#34;Sichere&#34; Captchas programmieren</title>
      <link>https://0rph3us.github.io/post/2010/08/sichere-captchas-programmieren/</link>
      <pubDate>Wed, 18 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2010/08/sichere-captchas-programmieren/</guid>
      <description>&lt;p&gt;
Man möchte manchmal Teile seiner Seite mittels Captchas schützen. Es gibt zahlreiche fertige Varianten, auch für wordpress. Diese haben fast immer den Nachteil, dass sie &lt;a href=&#34;http://de.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;http://www.adobe.com/support/documentation/de/flash/&#34;&gt;Flash&lt;/a&gt;, oder &lt;a href=&#34;http://www.w3.org/TR/WD-session-id&#34;&gt;Sessions&lt;/a&gt; benutzen. Persönlich habe ich eine Abneigung gegen &lt;a href=&#34;http://de.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt; und &lt;a href=&#34;http://www.adobe.com/support/documentation/de/flash/&#34;&gt;Flash&lt;/a&gt;. &lt;a href=&#34;http://www.w3.org/TR/WD-session-id&#34;&gt;Sessions&lt;/a&gt; lassen sich nicht immer nachträglich nutzen und man erzeugt serverseitig etwas Last. Fakt ist, dass ich keine Sessions mag! Das schlimmste an fertigen Captcha-Lösungen ist der zum Teil invalide html-Code. Ich möchte validen &lt;a href=&#34;http://www.w3.org/TR/xhtml1/&#34;&gt;xhtml 1.0 strict&lt;/a&gt;-Code haben und das Captcha sollte in mein Design passen. Wenn man die ganzen Anforderungen erfüllt haben möchte, so muss man wohl oder übel sein Captcha selbst programmieren.&lt;/p&gt;
&lt;h2&gt;Wie komme ich zum sicheren Captcha&lt;/h2&gt;
&lt;p&gt;Wenn ich auf Sessions verzichten möchte, so muss ich die Lösung des Captcha mit auf die Seite schreiben. Das kann man in einen &lt;em&gt;nicht sichtbaren&lt;/em&gt; Feld machen. Damit man dieses Feld nicht so einfach auslesen kann, schreibt man einen &lt;a href=&#34;http://burtleburtle.net/bob/hash/index.html&#34;&gt;Hash&lt;/a&gt; hinein bzw. man verschlüsselt den Inhalt.&lt;/p&gt;
&lt;pre lang=&#34;php&#34; line=&#34;1&#34;&gt;
define(KEY, &#34;Ich bin ein Key&#34;);
define(IV, &#34;KlyV6gxG3MOPzlfuj8azF6sKKTnsdsiN58i0zjHA0EU=&#34;);

function Crypt($plaintext){
    $td = mcrypt_module_open(&#39;rijndael-256&#39;, &#39;&#39;, &#39;ofb&#39;, &#39;&#39;);

    $iv = base64_decode(IV);
    $ks = mcrypt_enc_get_key_size($td);

     /* Create key */
    $key = substr(md5(KEY), 0, $ks);

    /* Intialize encryption */
    mcrypt_generic_init($td, $key, $iv);

    /* Encrypt data */
    $encrypted = mcrypt_generic($td, $plaintext);

    /* Terminate decryption handle and close module */
    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);

    return base64_encode($encrypted);
}

function Decrypt($chiffre){
    $td = mcrypt_module_open(&#39;rijndael-256&#39;, &#39;&#39;, &#39;ofb&#39;, &#39;&#39;);

    $iv = base64_decode(IV);
    $ks = mcrypt_enc_get_key_size($td);

     /* Create key */
    $key = substr(md5(KEY), 0, $ks);

    $chiffre = base64_decode($chiffre);
    mcrypt_generic_init($td, $key, $iv);
    $plaintext = mdecrypt_generic($td, $chiffre);

    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);

    return $plaintext;
}

function draw_captcha_form(){
    .....
    $time = time() + 60*30;
    $captchaSolution = &#34;Test&#34;
    echo &#34;\t\n\tBitte Captcha lösen&lt;br /&gt;\n&#34;;
    // erzeuge ein Captcha
    echo &#34;\t\n&#34;;
    echo &#34;\t&#34; . &#39;
&lt;input name=&#34;captvalue&#34; id=&#34;captvalue&#34; value=&#34;&#34; size=&#34;40&#34; tabindex=&#34;4&#34; type=&#34;text&#34; /&gt;&#39; . &#34;\n&#34;;
    echo &#34;\t&#34;    . &#39;
&lt;input name=&#34;captcha&#34; value=&#34;&#39;. Crypt($time . &#34;~&#34; . $captchaSolution . &#34;~&#34; . $REMOTE_ADDR) . &#39;&#34; type=&#34;hidden&#34;/&gt;&#39; . &#34;\n&#34;;
}

function check_post($) {
    ....
    $captcha = $_POST[&#39;captvalue&#39;];
    list($timeOld, $secret, $addr) = explode(&#39;~&#39;,Decrypt($_POST[&#39;captcha&#39;]));
    ....
    if($timeOld &lt;= time()){
            echo &#34;Deine Zeit ist abgelaufen&#34;;
            return;
    }
    if($addr != $REMOTE_ADDR){
            echo &#34;Falsche IP&#34;;
            return;
    }
    if($secret != $captcha){
            echo &#34;Falsches Captcha&#34;;
            return;
    }
    .....
}
&lt;/pre&gt;
&lt;p&gt;
Mit diesen Ideen kann man sich nun sein eigenes Captcha zusammen bauen. Ich generiere z.B. Matheaufgaben.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>