<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nagios on Michael im Netz</title>
    <link>https://0rph3us.github.io/tags/nagios/</link>
    <description>Recent content in Nagios on Michael im Netz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Diese Seite ist unter der &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt; lizenziert.</copyright>
    <lastBuildDate>Thu, 10 Sep 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://0rph3us.github.io/tags/nagios/rss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sensoren mit Nagios abfragen</title>
      <link>https://0rph3us.github.io/post/2009/09/sensoren-mit-nagios-abfragen/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2009/09/sensoren-mit-nagios-abfragen/</guid>
      <description>&lt;p&gt;Ich wollte verschiedene Sparc-Rechner mit &lt;a href=&#34;http://www.nagios.org/&#34;&gt;Nagios&lt;/a&gt; überwachen.
Da ich kein passendes Plugin gefunden habe um die Sensoren zu überwachen habe ich mir selbst eins geschrieben.&lt;/p&gt;

&lt;p&gt;Es funktioniert ganz gut, wenn jemand Probleme mit dem Plugin hat, dann kann ich versuchen es zu verbessern.
Man kann das &lt;a href=&#34;http://blogs.sun.com/rennecke/resource/stuff/check_solaris_sensors&#34;&gt;Plugin auch hier&lt;/a&gt; herunter laden.
Ich parse die Ausgabe von &lt;code&gt;prtpicl&lt;/code&gt;. Wenn die Temperatur &lt;strong&gt;HighWarningThreshold  $warn&lt;/strong&gt; übersteigt, dann wird
warning zurück gegeben. Wenn &lt;strong&gt;HighWarningThreshold&lt;/strong&gt; überschritten wird, dann gibt das Plugin critical zurück.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl -w

# File:    check_solaris_sensors
# Purpose: prtpicl output parser
# Author:  Michael Rennecke michael.rennecke@sun.com
# Date:    2009/07/08
# Version: 0.2

use strict;

my $warn        = 15;
my $prtpicl     = &amp;quot;/usr/sbin/prtpicl&amp;quot;;
my @diag        = ();
my @sensor_data = ();
my $state       = 0;
my $output      = &amp;quot;&amp;quot;;

unless(open(DIAG, &amp;quot;$prtpicl -v -c temperature-sensor | &amp;quot;)) {
    print STDERR &amp;quot;Initialization error - Can&#39;t execute  $prtpicl -v -c temperature-sensor!\n&amp;quot;;
    exit(3);
}

while(){
    push(@diag, $_);
}
close(DIAG);

unless( @diag &amp;amp;gt; 0) {
    print STDERR &amp;quot;Can&#39;t find any temperature-sensor!\n&amp;quot;;
    exit(3);
}

sub change_state {
    if ($_[0] &amp;amp;gt; $state) {
        $state = $_[0];
    }
}

my $sensor      = undef;
my $warning     = undef;
my $critical    = undef;
my $temperature = undef;
my $get_temp    = 0;

foreach my $line (@diag) {

    $get_temp = 0;

    if ($line =~ /\s*([a-zA-Z0-9_]+)\s*\(temperature-sensor/) {
        $sensor = $1;
    } elsif ($line =~ /:HighWarningThreshold\s*(\d+)/) {
        $warning = $1;
    } elsif ($line =~ /:Temperature\s*(\d+)/) {
        $temperature = $1;
        $get_temp = 1;
    }

    if ($get_temp == 1) {
        if ($temperature &amp;amp;lt;= $warning - $warn) {
            &amp;amp;amp;change_state(0);
        } elsif ($temperature &amp;amp;lt;= $warning) {
            &amp;amp;amp;change_state(1);
        } else {
            &amp;amp;amp;change_state(2);
        }
    $output = &amp;quot;$output $sensor: ${temperature}°C &amp;quot;;
    }

}

if ($state == 0) {
    $output = &amp;quot;Temperature OK --$output \n&amp;quot;;
} elsif ($state == 1) {
    $output = &amp;quot;Temperature WARNING --$output \n&amp;quot;;
} elsif ($state == 2) {
    $output = &amp;quot;Temperature CRITICAL --$output \n&amp;quot;;
} else {
    $output = &amp;quot;Temperature UNKNOWN --$output \n&amp;quot;;
}

print STDOUT &amp;quot;$output&amp;quot;;
exit ($state);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>