<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Michael im Netz</title>
    <link>https://0rph3us.github.io/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on Michael im Netz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <copyright>Diese Seite ist unter der &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt; lizenziert.</copyright>
    <lastBuildDate>Wed, 17 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://0rph3us.github.io/tags/raspberry-pi/rss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RSS Reader selbst betreiben</title>
      <link>https://0rph3us.github.io/post/2014/09/rss-reader-selbst-betreiben/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/09/rss-reader-selbst-betreiben/</guid>
      <description>

&lt;p&gt;Nach meinen Wissen gab es eine Zeit, in der RSS-Feeds als Old-School und damit
als nicht mehr zeitgemäß galten. Ich finde, dass sie zur Zeit immer beliebter
werden. Ich möchte meine Feeds immer dabei und nicht viele Apps auf dem Smartphone
installieren, nur um meinen 20 News-Seiten zu folgen. Das ganze im Browser zu
lesen kann auf mobilen Devices nervig werden, entweder ist die mobile Seite nicht
wirklich brauchbar oder man hat zu viele Seite, welche man lesen möchte.&lt;/p&gt;

&lt;p&gt;Da viele Seiten einen &lt;a href=&#34;http://de.wikipedia.org/wiki/Web-Feed&#34;&gt;Feed&lt;/a&gt; anbieten, kann man diese abonnieren und in einen
Feed-Reader zusammen führen. Es gibt Menschen, wie mich, die keinen Reader wie
&lt;a href=&#34;http://feedly.com/&#34;&gt;Feedly&lt;/a&gt; nutzen möchten.&lt;/p&gt;

&lt;p&gt;Mit einem &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; kann man einfach selbst einen RSS-Reader an der heimischen
DSL-Leitung betreiben. Dazu benutze ich &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; als Webserver, &lt;a href=&#34;http://www.mysql.de/&#34;&gt;MySQL&lt;/a&gt; als Datenbank
sowie &lt;a href=&#34;http://tt-rss.org/&#34;&gt;Tiny Tiny RSS&lt;/a&gt; als Reader. Als Betriebssystem nutze ich Raspbian.&lt;/p&gt;

&lt;h2 id=&#34;nginx-installieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Nginx installieren&lt;/h2&gt;

&lt;p&gt;Wie man &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; installiert, habe ich in &lt;a href=&#34;https://0rph3us.github.io/post/2014/07/webserver-auf-dem-raspberry-pi-installieren/&#34;&gt;diesem Artikel&lt;/a&gt; schon erklärt.
Je nach dem wie paranoid bzw. nerdig man ist, sollte man die Verbindung noch
mit SSL/TLS absichern.&lt;/p&gt;

&lt;h2 id=&#34;mysql-installieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;MySQL installieren&lt;/h2&gt;

&lt;p&gt;Die grundlegende Installation von MySQL geht leicht von der Hand. Da man nur einige
Pakte installieren muss. Die nötige Datenbank ist auch schnell eingerichtet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden
sudo su -

apt-get update
apt-get install mysql-server mysql-client php5-mysql php5-curl

# Datenbanken einrichten
mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
[...]
mysql&amp;gt; CREATE DATABASE ttrss;
Query OK, 1 row affected (0.01 sec)
 
mysql&amp;gt; GRANT ALL ON ttrss.* TO ttrss@localhost IDENTIFIED BY &#39;GeheimesPasswort&#39;;
Query OK, 0 rows affected (0.02 sec)
 
mysql&amp;gt; exit
Bye
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysql-härten:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;MySQL härten&lt;/h3&gt;

&lt;p&gt;Mit dem folgenden Tool kann man seine MySQL noch härten. Dazu löscht
es die Test-Datenbanken und anonyme Benutzer. Weiterhin ist ein
Remote Login für den Benutzer &lt;code&gt;root&lt;/code&gt; nicht mehr möglich.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden
sudo su -
mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tiny-tiny-rss-installieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Tiny Tiny RSS installieren&lt;/h2&gt;

&lt;p&gt;Man lädt sich die &lt;a href=&#34;https://github.com/gothfox/Tiny-Tiny-RSS/releases&#34;&gt;aktuellste Version&lt;/a&gt; von &lt;a href=&#34;http://tt-rss.org/&#34;&gt;Tiny Tiny RSS&lt;/a&gt; in das Document Root-Verzeichnis
von Nginx und entpackt es&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# zu root werden
sudo su -
cd /usr/share/nginx/www
wget https://github.com/gothfox/Tiny-Tiny-RSS/archive/1.13.tar.gz
tar xfvz 1.13.tar.gz
mv Tiny-Tiny-RSS-1.13/ tt-rss/
chown -R www-data:www-data tt-rss/
rm 1.13.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nachdem man das alles gemacht hat, führt man die Installation von Tiny Tiny RSS im Browser fort. Dazu
&lt;code&gt;http(s)://IP/tt-rss/install/&lt;/code&gt;
Dort wählen wir MySQL in dem Feld &lt;em&gt;Database type&lt;/em&gt;, geben als &lt;em&gt;Username&lt;/em&gt; und &lt;em&gt;Database name&lt;/em&gt;
&lt;em&gt;ttrss&lt;/em&gt; an und geben das Passwort, welches für den MySQL Benutzer &lt;em&gt;ttrss&lt;/em&gt; angelegt hat,
in das Feld &lt;em&gt;Password&lt;/em&gt; ein. Der Port ist 3306. In das Feld &lt;em&gt;Host name&lt;/em&gt; schreiben wir 127.0.0.1
Anschließend klicken wir auf &lt;em&gt;Test configuration&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Wenn alles richtig war, dann erscheint &lt;em&gt;Database test succeeded&lt;/em&gt;. Nach einem Klick auf
&lt;em&gt;Initialize database&lt;/em&gt; können wir aus der Textbox die Konfiguration kopieren.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo su -
cat &amp;lt;&amp;lt; EOF &amp;gt; /usr/share/nginx/www/tt-rss/config.php
kopierten Text hier einfügen
EOF  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;feeds-aktualisieren:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Feeds aktualisieren&lt;/h3&gt;

&lt;p&gt;Dazu muss man die folgende Zeile in die &lt;code&gt;crontab&lt;/code&gt; von &lt;code&gt;root&lt;/code&gt; eintragen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/30 * * * * su www-data -s /bin/bash -c &#39;/usr/bin/php /var/www/tt-rss/update.php --feeds --quiet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tiny-tiny-rss-für-das-smartphone:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Tiny Tiny RSS für das Smartphone&lt;/h2&gt;

&lt;p&gt;Es gibt zwei Android Clients für Tiny Tiny RSS. Diese haben beide den Nachteil, dass sie unter Umständen
Probleme mit den Ciphers der SSL Verschlüsselung haben. Da das bei mir der Fall war bin ich auf eine HTML
App umgestiegen, welche auch noch auf meinen Raspberry Pi läuft. Dazu muss man nur &lt;a href=&#34;https://github.com/mboinet/ttrss-mobile/archive/1.0-1.tar.gz&#34;&gt;dieses Archiv&lt;/a&gt; herunter
laden und entpacken, alternativ kann man auch das &lt;a href=&#34;https://github.com/mboinet/ttrss-mobile&#34;&gt;dazugehörige git-Repository&lt;/a&gt; klonen.&lt;/p&gt;

&lt;p&gt;Man muss vorher sicherstellen, dass der API-Zugriff zu Tiny Tiny RSS erlaubt ist. Man loggt sich als ersten
in TT-RSS ein und klickt dann auf &lt;em&gt;Aktionen&lt;/em&gt; -&amp;gt; &lt;em&gt;Einstellungen&lt;/em&gt; und &lt;em&gt;Aktiviere API-Zugang&lt;/em&gt; muss ein grünes
Häkchen haben (wenn nicht anklicken).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo su -
cd /usr/share/nginx/www
wget https://github.com/mboinet/ttrss-mobile/archive/1.0-1.tar.gz
tar xfvz 1.0-1.tar.gz
mv ttrss-mobile-1.0-1 mobile
cp mobile/scripts/conf.js{-dist,}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nun kann man unter &lt;code&gt;http(s)://IP/mobile/&lt;/code&gt; die HTML5 Anwendung für das Smartphone erreichen.&lt;/p&gt;

&lt;h2 id=&#34;schlussbemerkung:589edeb4b03d933707b2122f6cfd44ac&#34;&gt;Schlussbemerkung&lt;/h2&gt;

&lt;p&gt;Soll der soeben installierte Dienst auch außerhalb des eigenen Netzwerkes verfügbar sein, so müssen
folgende Ports (80 und 443) im Router freigegeben werden.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi und SPDY</title>
      <link>https://0rph3us.github.io/post/2014/09/raspberry-pi-und-spdy/</link>
      <pubDate>Mon, 08 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/09/raspberry-pi-und-spdy/</guid>
      <description>&lt;p&gt;Auf meinen Raspberry Pi hatte ich meinen Nginx so konfiguriert, dass er seine
Inhalte auch per &lt;a href=&#34;http://de.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt; ausliefern kann. Das hatte ganz seltsame Nebeneffekte
bei einigen php-Anwendungen und diesem Blog. Ich habe eine weile gedacht, dass
meine DSL-Leitung zu langsam ist, weil ich auch bei statischen Seiten Verbindungsabbrüche
und halb geladenes &lt;a href=&#34;http://de.wikipedia.org/wiki/Cascading_Style_Sheets&#34;&gt;css&lt;/a&gt; hatte.
Dann habe ich einen Versuch ohne &lt;a href=&#34;http://de.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt; gemacht und die Performance ist spürbar
besser geworden.&lt;/p&gt;

&lt;p&gt;Mit SPDY soll der Seitenaufbau schneller sein, als mit TLS und HTTP, aber das scheint
auf dem Raspberry Pi nicht der fall zu sein. Es fehlt ihm entweder an Ressourcen oder
die Implementierung im Nginx ist nicht optimal. Ich tippe darauf, dass mein
gesamtes Setup: Rasberry Pi und eine normale DSL-Leitung nicht geeignet sind um
SPDY sinnvoll zu nutzen.&lt;/p&gt;

&lt;p&gt;Durch diese Erfahung werde ich SPDY als Protokoll nicht mehr anbieten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webserver auf dem Raspberry Pi installieren</title>
      <link>https://0rph3us.github.io/post/2014/07/webserver-auf-dem-raspberry-pi-installieren/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/07/webserver-auf-dem-raspberry-pi-installieren/</guid>
      <description>

&lt;p&gt;Da man auf dem &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; nicht sehr viele Ressourcen zur Verfügung hat, scheidet &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; als
Webserver für mich aus. Ich habe &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;lighttpd&lt;/a&gt; und &lt;a href=&#34;http://nginx.org&#34;&gt;Nginx&lt;/a&gt; ausprobiert. Von &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;lighttpd&lt;/a&gt; war ich am
Anfang sehr überzeugt. Er kann alles was man benötigt. Als mein Setup komplizierter wurde, war
ich nicht mehr in Lage in die Ideen mit &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;lighttpd&lt;/a&gt; umzusetzen. Die Ursache liegt weniger im
Funktionsumfang, sondern an den zur Verfügung stehenden Tutorials, Beispielkonfigurationen sowie der
Default-Konfiguration wenn man &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;lighttpd&lt;/a&gt; bei Raspbian installiert. Den endgültigen &lt;em&gt;Todesstoß&lt;/em&gt; hat
&lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;lighttpd&lt;/a&gt; bekommen, als ich &lt;a href=&#34;https://www.phusionpassenger.com/&#34;&gt;Passanger&lt;/a&gt; ausprobieren wollte. Für &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; und &lt;a href=&#34;http://nginx.org&#34;&gt;Nginx&lt;/a&gt; gibt es fertige
&lt;a href=&#34;https://www.phusionpassenger.com/&#34;&gt;Passanger&lt;/a&gt;-Module bzw. funktionierenden Install-Skripte. Ich möchte nicht sagen, dass &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;lighttpd&lt;/a&gt; schlechter
als &lt;a href=&#34;http://nginx.org&#34;&gt;Nginx&lt;/a&gt; ist, aber ich bin bei &amp;ldquo;komplexen&amp;rdquo; Setups mit mehreren virtuellen Hosts und rewrite-Magie
besser mit &lt;a href=&#34;http://nginx.org&#34;&gt;Nginx&lt;/a&gt; zurecht gekommen.&lt;/p&gt;

&lt;p&gt;Im folgenden werde ich mich auf &lt;a href=&#34;http://nginx.org&#34;&gt;Nginx&lt;/a&gt; &lt;em&gt;Engine-X&lt;/em&gt; konzentrieren. da es für ihn sehr viele Tutorials
gibt und er sehr ressourcenschonend ist, ist er meiner Meinung nach die erste Wahl für den &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Viele werden mit nur einen Webserver nicht glücklich, weil ein Webserver nur statische Inhalte ausliefert.
Damit Nginx php ausliefern kann benötigt man php auf seinen Rechner sowie den
PHP Fast CGI Process Manager. Dieser verwaltet php-Prozesse, welche wiederum statisches HTML generieren
und an den Nginx weiter geben.&lt;/p&gt;

&lt;h2 id=&#34;nginx-mit-php-installieren-und-einrichten:db017475119777d596b8e698842c0f61&#34;&gt;Nginx mit php installieren und einrichten&lt;/h2&gt;

&lt;p&gt;Vor der Installation von neuen Pakten sollte man nachsehen, ob es Updates gibt. Ein
sicherheitsbewusster Admin aktualisiert jeden Tag seine Systeme,
gerade wenn sie öffentlich erreichbar sind.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}&lt;/p&gt;

&lt;h1 id=&#34;zu-root-werden:db017475119777d596b8e698842c0f61&#34;&gt;zu root werden&lt;/h1&gt;

&lt;p&gt;sudo su -&lt;/p&gt;

&lt;p&gt;apt-get update
apt-get upgrade&lt;/p&gt;

&lt;p&gt;apt-get install nginx php5-fpm php5-cgi php5-cli php5-common
{% endhighlight %}&lt;/p&gt;

&lt;h3 id=&#34;nginx-konfigurieren:db017475119777d596b8e698842c0f61&#34;&gt;Nginx konfigurieren&lt;/h3&gt;

&lt;p&gt;Wenn man nur einen virtuellen Host einrichten möchte, kann man die gesamte Konfiguration in der
&lt;code&gt;/etc/nginx/ningx.conf&lt;/code&gt; erledigen. Das Aufteilen der Konfiguration in mehrere Dateien macht diese
übersichtlicher. Somit ist es auch möglich virtuelle Host zu aktivieren und zu deaktivieren.&lt;/p&gt;

&lt;p&gt;Meine Empfehlung ist, dass jede Applikation/Seite ein eigener Host ist. So hat jede Applikation
ihr eigenes Log-File und eine übersichtliche Konfiguration.
Der Nachteil ist, dass man mehrere (Sub) Domains benötigt. Das ist nicht
mit allen Dyndns Anbietern möglich.&lt;/p&gt;

&lt;p&gt;Konfigurationen, welche global gültig sind, schreibe ich auch
in die &lt;code&gt;/etc/nginx/ningx.conf&lt;/code&gt;. Das sind z.B. ssl-Offloading, Redirekt zu https und die
ssl-Konfiguration.&lt;/p&gt;

&lt;p&gt;Das ist eine exemplarische Konfiguration eines Host, welcher php ausführt und auf Port 80 lauscht.
Der Host lauscht auf die Namen &lt;em&gt;localhost&lt;/em&gt; und &lt;em&gt;awesomephp.example.com&lt;/em&gt;. Port 80 ist der
Standardport für http. Wenn ihr nur einen Host konfiguriert habt (nur ein server-Abschnitt), dann
wird dieser immer genommen, unabhängig davon was im host-Header der Anfrage steht.&lt;/p&gt;

&lt;p&gt;{% highlight nginx %}
server {
    listen 80;
    server_name localhost awesomephp.example.com;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root /var/www/awesomephp;
index index.html index.php;

location / {
    try_files $uri $uri/ /index.php?$args;
}

location ~ ^(.+\.php)(.*)$ {
    try_files $fastcgi_script_name =404;
    fastcgi_split_path_info  ^(.+\.php)(.*)$;
    fastcgi_pass   unix:/var/run/php5-fpm.sock;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    fastcgi_param  PATH_INFO        $fastcgi_path_info;
    include        /etc/nginx/fastcgi_params;
}

access_log      /var/log/nginx/awesome.access.log;
error_log       /var/log/nginx/awesome.error.log;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Nachdem der Nginx konfiguriert ist muss man die Konfiguration nur noch neu laden.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
service nginx reload
{% endhighlight %}&lt;/p&gt;

&lt;h3 id=&#34;test-der-konfiguration:db017475119777d596b8e698842c0f61&#34;&gt;Test der Konfiguration&lt;/h3&gt;

&lt;p&gt;Nachdem der Nginx fehlerfrei seine Konfiguration neu geladen hat bzw. neu gestartet wurde kann man sie mit dem
folgenden Minimalbeispiel testen:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
mkdir -p /var/www/awesomephp
echo &amp;ldquo;&amp;lt;? phpinfo(); /&amp;gt;&amp;rdquo; &amp;gt; /var/www/awesomephp/info.php
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Wenn nur ein Host konfiguriert ist, dann kann man jetzt Browser &lt;code&gt;http://192.168.1.100/info.php&lt;/code&gt; aufrufen
und es erscheint eine Übersicht der php-Einstellungen. Ich gehe davon aus, dass der Raspberry Pi die IP
192.168.1.100 hat.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mein Raspberry Pi</title>
      <link>https://0rph3us.github.io/post/2014/07/mein-raspberry-pi/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/07/mein-raspberry-pi/</guid>
      <description>&lt;p&gt;Ich habe seit einiger Zeit einen &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt;, aber warum habe ich mir einen gekauft? Da ich inzwischen
Papa bin, musste meine Rechnerburg zugunsten des Kinderzimmers weichen. Ich hatte dann überlegt, ob ich
mir einen Rootserver miete oder einfach einen &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Pi&lt;/a&gt; zum &lt;em&gt;spielen&lt;/em&gt; kaufe.&lt;/p&gt;

&lt;p&gt;Am Raspberry Pi hat mich immer die magere Ausstattung an RAM und CPU gestört. Aus diesem Grund habe ich
überlegt, ob ich mir nicht lieber ein &lt;a href=&#34;http://cubieboard.org/tag/cubietruck/&#34;&gt;Cubietruck&lt;/a&gt; anschaffe. Zum Schluss habe ich mich für einen Pi
entschieden, da er der günstige Einstieg in die Welt der Mini-Computer ist und ich kann ihn ohne
Probleme über den USB-Port vom Router mit Strom versorgen.&lt;/p&gt;

&lt;p&gt;Warum möchte man einen Mini-Rechner haben? Das ist ganz einfach: Ich finde den Kalenderservice von google
ganz toll, aber die Integration mit Thunderbird finde ich einfach grausam. Ich möchte auch meine ganzen
Kontakte an einen zentralen Ort haben und dieser sollte nicht irgendwo in &lt;em&gt;Cloud&lt;/em&gt; sein. Das waren die
ersten Ideen, welche ich mit dem Pi umsetzen wollte. Etwas später ist noch dieser Blog und eine
&lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt;-Alternative hinzugekommen.&lt;/p&gt;

&lt;p&gt;Aktuell bin ich noch am basteln, aber ich werde hier von meinen Fortschritten berichten. Das meiste läuft,
aber ich bin noch am verbessern.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi auf Jessie updaten</title>
      <link>https://0rph3us.github.io/post/2014/07/raspberry-pi-auf-jessie-updaten/</link>
      <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/07/raspberry-pi-auf-jessie-updaten/</guid>
      <description>

&lt;p&gt;Das aktuell Raspbian basiert auf Debian 7 &amp;ldquo;Wheezy&amp;rdquo;. Seit einiger Zeit gibt
es auch Raspbian Pakete für Debian 8 &amp;ldquo;Jessie&amp;rdquo;. Jessie ist der Nachfolger von &amp;ldquo;Wheezy&amp;rdquo;.
Die Pakete von &amp;ldquo;Jessie&amp;rdquo; sind um einiges aktueller, als die von &amp;ldquo;Wheezy&amp;rdquo;. Das bedeutet
aber, dass sie nicht unbedingt so stabil sein können. Ich habe bis jetzt noch keine
negativen Erfahrungen gemacht.&lt;/p&gt;

&lt;h3 id=&#34;aktualisierung-ausführen:91ca631d89320c543d2d97dabdf66c3d&#34;&gt;Aktualisierung ausführen&lt;/h3&gt;

&lt;p&gt;Die folgenden Schritte müssen alle als Benutzer &lt;strong&gt;root&lt;/strong&gt; ausgeführt werden. Entweder man
loggt sie als &lt;strong&gt;root&lt;/strong&gt; ein,  man schreibt &lt;code&gt;sudo&lt;/code&gt; vor jedes Komando oder man öffnet eine
root-Shell mit &lt;code&gt;sudo -i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Man muss die &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; editieren. Dazu öffnet man sie mit einem Editor
der Wahl (ich bevorzuge vi ;-)) und man ändert alle vorkommen von &lt;strong&gt;wheezy&lt;/strong&gt; in &lt;strong&gt;jessie&lt;/strong&gt;.
Das ganze lässt sich auch automatisch mit &lt;code&gt;sed&lt;/code&gt; machen.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
cp /etc/apt/sources.list{,.$(date +%F)} &amp;amp;&amp;amp; sed -e &amp;rsquo;s/wheezy/jessie/g&amp;rsquo; -i /etc/apt/sources.list
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Wenn man nicht weiß was man macht, dann sollte man die Datei lieber per Hand editieren. Bei mir gibt es nur
eine Zeile und diese sollte dann wie folgt aussehen:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
deb &lt;a href=&#34;http://mirrordirector.raspbian.org/raspbian/&#34;&gt;http://mirrordirector.raspbian.org/raspbian/&lt;/a&gt; jessie main contrib non-free rpi
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Und nun muss man nur noch den Raspberry Pi updaten:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
apt-get update &amp;amp;&amp;amp; apt-get dist-upgrade
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Das Update kann sehr lange dauern. Anschließend muss man den Raspberry Pi neu starten und das Update ist beendet!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neuer Blog</title>
      <link>https://0rph3us.github.io/post/2014/07/neuer-blog/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://0rph3us.github.io/post/2014/07/neuer-blog/</guid>
      <description>

&lt;p&gt;Ich habe mich entschlossen, meinen alten &lt;a href=&#34;http://wpde.org/&#34;&gt;Wordpress&lt;/a&gt;-Blog einzudampfen. Ich
fand Wordpress schon immer recht schwergewichtig, aber ich kannte bis jetzt keine Alternative um einen
&amp;ldquo;gut&amp;rdquo; aussehenden Blog mit &amp;ldquo;wenig&amp;rdquo; Arbeit zu pflegen.&lt;/p&gt;

&lt;p&gt;Nun bin ich auf &lt;a href=&#34;http://jekyllbootstrap.com&#34;&gt;JekyllBootstrap&lt;/a&gt; und &lt;a href=&#34;https://github.com/dhulihan/hooligan&#34;&gt;Hooligan&lt;/a&gt; gestoßen.
Am Theme habe ich etwas etwas Hand angelegt. Als
Versionsverwaltung nutze ich &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt;. Der gesamte Blog ist als
Code auf &lt;a href=&#34;https://github.com/0rph3us/jekyll-bootstrap&#34;&gt;github&lt;/a&gt; zu finden.&lt;/p&gt;

&lt;p&gt;Da ich nun offline am Blog arbeiten kann, möchte ich wieder aktiver sein.&lt;/p&gt;

&lt;h2 id=&#34;der-alte:35e6c4eaf33501dfb90b608aab77ae63&#34;&gt;Der Alte&lt;/h2&gt;

&lt;p&gt;Ich habe bzw. bin noch dabei die gesamten Inhalte des alten Wordpress zu portieren. Das meiste habe
ich automatisch migriert. Dadurch kann es noch Leichen im Layout geben. Ich werde nach und nach
die alten Posts überarbeiten.&lt;/p&gt;

&lt;h2 id=&#34;technik:35e6c4eaf33501dfb90b608aab77ae63&#34;&gt;Technik&lt;/h2&gt;

&lt;p&gt;Die erste Version des Blogs wird auf meinen Raspberry Pi laufen. Als Webserver verwende ich Nginx, außerdem
verwende ich Varnish zum cachen. Ich hoffe, dass mit diesem Setup die Geschwindigkeit des Blog
erträglich bleibt.&lt;/p&gt;

&lt;p&gt;In weiteren Beiträgen werde ich schreiben wie das Setup genau aussieht. Ich auch noch etwas
am ausprobieren.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>